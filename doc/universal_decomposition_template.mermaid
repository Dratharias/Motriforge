graph TB
    %% ===== UNIVERSAL FEATURE DECOMPOSITION TEMPLATE =====
    subgraph FeatureSystem ["🎯 [FEATURE_NAME] Decomposed System"]
        
        %% ===== FACADE LAYER (Always Present) =====
        subgraph FacadeLayer ["🎭 Facade Layer"]
            FeatureFacade["🎯 [Feature] Facade<br/><<Facade>>"]
            FeatureBuilder["🏗️ [Feature] Builder<br/><<Builder>>"]
            FeatureOrchestrator["🎼 [Feature] Orchestrator<br/><<Orchestrator>>"]
            ConfigurationManager["⚙️ Configuration Manager<br/><<ConfigManager>>"]
        end
        
        %% ===== STRATEGY LAYER (For Behavioral Variants) =====
        subgraph StrategyLayer ["🎯 Strategy Layer"]
            direction TB
            
            %% Primary Strategies (Core Behavior Variants)
            subgraph PrimaryStrategies ["Primary Strategies"]
                IPrimaryStrategy["🔌 I[Primary] Strategy<br/><<Interface>>"]
                ConcreteStrategyA["🎯 [Variant A] Strategy<br/><<ConcreteStrategy>>"]
                ConcreteStrategyB["⚡ [Variant B] Strategy<br/><<ConcreteStrategy>>"]
                ConcreteStrategyC["🔄 [Variant C] Strategy<br/><<ConcreteStrategy>>"]
            end
            
            %% Secondary Strategies (Supporting Behavior)
            subgraph SecondaryStrategies ["Secondary Strategies"]
                ISecondaryStrategy["🔌 I[Secondary] Strategy<br/><<Interface>>"]
                SecondaryStrategyA["📊 [Secondary A] Strategy<br/><<ConcreteStrategy>>"]
                SecondaryStrategyB["🔒 [Secondary B] Strategy<br/><<ConcreteStrategy>>"]
                SecondaryStrategyC["⏰ [Secondary C] Strategy<br/><<ConcreteStrategy>>"]
            end
            
            %% Cross-Cutting Strategies
            subgraph CrossCuttingStrategies ["Cross-Cutting Strategies"]
                ICrossCuttingStrategy["🔌 I[CrossCutting] Strategy<br/><<Interface>>"]
                ErrorHandlingStrategy["❌ Error Handling Strategy<br/><<ConcreteStrategy>>"]
                SecurityStrategy["🔒 Security Strategy<br/><<ConcreteStrategy>>"]
                PerformanceStrategy["⚡ Performance Strategy<br/><<ConcreteStrategy>>"]
            end
        end
        
        %% ===== COMMAND LAYER (For Operations) =====
        subgraph CommandLayer ["⚡ Command Layer"]
            direction TB
            
            %% Command Pattern
            IFeatureCommand["🔌 I[Feature] Command<br/><<Interface>>"]
            CommandInvoker["📞 Command Invoker<br/><<Invoker>>"]
            
            %% Primary Commands (Core Operations)
            subgraph PrimaryCommands ["Primary Commands"]
                CreateCommand["➕ Create [Entity] Command<br/><<ConcreteCommand>>"]
                UpdateCommand["✏️ Update [Entity] Command<br/><<ConcreteCommand>>"]
                DeleteCommand["🗑️ Delete [Entity] Command<br/><<ConcreteCommand>>"]
                ProcessCommand["⚡ Process [Action] Command<br/><<ConcreteCommand>>"]
            end
            
            %% Management Commands (Lifecycle Operations)
            subgraph ManagementCommands ["Management Commands"]
                InitializeCommand["🚀 Initialize Command<br/><<ConcreteCommand>>"]
                ValidateCommand["✅ Validate Command<br/><<ConcreteCommand>>"]
                CleanupCommand["🧹 Cleanup Command<br/><<ConcreteCommand>>"]
                RefreshCommand["🔄 Refresh Command<br/><<ConcreteCommand>>"]
            end
            
            %% Command Processing
            CommandProcessor["⚙️ Command Processor<br/><<Processor>>"]
            CommandQueue["📝 Command Queue<br/><<Queue>>"]
            CommandHistory["📜 Command History<br/><<History>>"]
        end
        
        %% ===== STATE MACHINE LAYER (For Complex Workflows) =====
        subgraph StateMachineLayer ["🔄 State Machine Layer"]
            direction TB
            
            %% State Machine
            FeatureStateMachine["🔄 [Feature] State Machine<br/><<StateMachine>>"]
            
            %% States (Workflow States)
            subgraph FeatureStates ["Feature States"]
                IdleState["⏸️ Idle State<br/><<ConcreteState>>"]
                ProcessingState["⚡ Processing State<br/><<ConcreteState>>"]
                CompletedState["✅ Completed State<br/><<ConcreteState>>"]
                ErrorState["❌ Error State<br/><<ConcreteState>>"]
                SuspendedState["⏸️ Suspended State<br/><<ConcreteState>>"]
            end
            
            %% State Transitions
            subgraph StateTransitions ["State Transitions"]
                IStateTransition["🔌 IState Transition<br/><<Interface>>"]
                StartTransition["▶️ Start Transition<br/><<ConcreteTransition>>"]
                CompleteTransition["✅ Complete Transition<br/><<ConcreteTransition>>"]
                ErrorTransition["❌ Error Transition<br/><<ConcreteTransition>>"]
                SuspendTransition["⏸️ Suspend Transition<br/><<ConcreteTransition>>"]
            end
            
            %% State Context
            StateContext["🎯 State Context<br/><<Context>>"]
        end
        
        %% ===== OBSERVER LAYER (For Event Handling) =====
        subgraph ObserverLayer ["👁️ Observer Layer"]
            direction TB
            
            %% Event Publisher
            EventPublisher["📡 [Feature] Event Publisher<br/><<Subject>>"]
            
            %% Event Listeners (By Concern)
            subgraph EventListeners ["Event Listeners"]
                IEventListener["🔌 I[Feature] Event Listener<br/><<Interface>>"]
                BusinessEventListener["💼 Business Event Listener<br/><<ConcreteObserver>>"]
                AuditEventListener["📋 Audit Event Listener<br/><<ConcreteObserver>>"]
                MetricsEventListener["📊 Metrics Event Listener<br/><<ConcreteObserver>>"]
                SecurityEventListener["🔒 Security Event Listener<br/><<ConcreteObserver>>"]
                NotificationEventListener["🔔 Notification Event Listener<br/><<ConcreteObserver>>"]
            end
            
            %% Events (Domain Events)
            subgraph FeatureEvents ["Feature Events"]
                EntityCreatedEvent["➕ [Entity] Created Event<br/><<Event>>"]
                EntityUpdatedEvent["✏️ [Entity] Updated Event<br/><<Event>>"]
                EntityDeletedEvent["🗑️ [Entity] Deleted Event<br/><<Event>>"]
                ProcessCompletedEvent["✅ Process Completed Event<br/><<Event>>"]
                ErrorOccurredEvent["❌ Error Occurred Event<br/><<Event>>"]
            end
        end
        
        %% ===== DECORATOR LAYER (For Cross-Cutting Concerns) =====
        subgraph DecoratorLayer ["🎨 Decorator Layer"]
            direction TB
            
            %% Base Decorator
            FeatureDecorator["🎨 [Feature] Decorator<br/><<Decorator>>"]
            
            %% Cross-Cutting Decorators
            subgraph CrossCuttingDecorators ["Cross-Cutting Decorators"]
                CachingDecorator["💾 Caching Decorator<br/><<ConcreteDecorator>>"]
                SecurityDecorator["🔒 Security Decorator<br/><<ConcreteDecorator>>"]
                AuditDecorator["📋 Audit Decorator<br/><<ConcreteDecorator>>"]
                MetricsDecorator["📊 Metrics Decorator<br/><<ConcreteDecorator>>"]
                ValidationDecorator["✅ Validation Decorator<br/><<ConcreteDecorator>>"]
                RetryDecorator["🔁 Retry Decorator<br/><<ConcreteDecorator>>"]
                TimeoutDecorator["⏰ Timeout Decorator<br/><<ConcreteDecorator>>"]
            end
        end
        
        %% ===== VALIDATION LAYER (For Rules and Constraints) =====
        subgraph ValidationLayer ["✅ Validation Layer"]
            direction TB
            
            %% Validation Engine
            ValidationEngine["✅ Validation Engine<br/><<Engine>>"]
            
            %% Validation Rules (By Category)
            subgraph ValidationRules ["Validation Rules"]
                IValidationRule["🔌 IValidation Rule<br/><<Interface>>"]
                BusinessRule["💼 Business Rule<br/><<ConcreteRule>>"]
                SecurityRule["🔒 Security Rule<br/><<ConcreteRule>>"]
                DataIntegrityRule["🛡️ Data Integrity Rule<br/><<ConcreteRule>>"]
                ComplianceRule["📋 Compliance Rule<br/><<ConcreteRule>>"]
                PerformanceRule["⚡ Performance Rule<br/><<ConcreteRule>>"]
            end
            
            %% Validation Components
            subgraph ValidationComponents ["Validation Components"]
                ValidationChain["⛓️ Validation Chain<br/><<ChainOfResponsibility>>"]
                ValidationContext["🎯 Validation Context<br/><<Context>>"]
                ValidationResult["📊 Validation Result<br/><<ValueObject>>"]
            end
        end
        
        %% ===== ADAPTER LAYER (For External Integration) =====
        subgraph AdapterLayer ["🔧 Adapter Layer"]
            direction TB
            
            %% External Adapters (By Type)
            subgraph ExternalAdapters ["External Adapters"]
                IExternalAdapter["🔌 IExternal Adapter<br/><<Interface>>"]
                DatabaseAdapter["🗄️ Database Adapter<br/><<ConcreteAdapter>>"]
                CacheAdapter["💾 Cache Adapter<br/><<ConcreteAdapter>>"]
                ApiAdapter["🌐 API Adapter<br/><<ConcreteAdapter>>"]
                FileSystemAdapter["📁 File System Adapter<br/><<ConcreteAdapter>>"]
                MessageQueueAdapter["📨 Message Queue Adapter<br/><<ConcreteAdapter>>"]
            end
            
            %% Connection Management
            subgraph ConnectionManagement ["Connection Management"]
                IConnectionManager["🔌 IConnection Manager<br/><<Interface>>"]
                ConnectionPool["🏊 Connection Pool<br/><<Pool>>"]
                ConnectionFactory["🏭 Connection Factory<br/><<Factory>>"]
            end
        end
        
        %% ===== CORE COMPONENTS (Domain Logic) =====
        subgraph CoreComponents ["🏛️ Core Components"]
            direction TB
            
            %% Domain Entities
            subgraph DomainEntities ["Domain Entities"]
                PrimaryEntity["🎯 [Primary] Entity<br/><<AggregateRoot>>"]
                SecondaryEntity["📋 [Secondary] Entity<br/><<Entity>>"]
                ValueObjects["💎 Value Objects<br/><<ValueObject>>"]
            end
            
            %% Domain Services
            subgraph DomainServices ["Domain Services"]
                CoreDomainService["🏛️ Core Domain Service<br/><<DomainService>>"]
                CalculationService["🧮 Calculation Service<br/><<DomainService>>"]
                ValidationService["✅ Validation Service<br/><<DomainService>>"]
            end
            
            %% Repositories
            subgraph Repositories ["Repositories"]
                IRepository["🔌 IRepository<br/><<Interface>>"]
                EntityRepository["📋 [Entity] Repository<br/><<ConcreteRepository>>"]
                CachedRepository["💾 Cached Repository<br/><<RepositoryDecorator>>"]
            end
            
            %% Factories
            subgraph Factories ["Factories"]
                EntityFactory["🏭 [Entity] Factory<br/><<Factory>>"]
                StrategyFactory["🏭 Strategy Factory<br/><<Factory>>"]
                AdapterFactory["🏭 Adapter Factory<br/><<Factory>>"]
            end
        end
        
        %% ===== CONFIGURATION LAYER (Settings and Config) =====
        subgraph ConfigurationLayer ["⚙️ Configuration Layer"]
            direction TB
            
            %% Configuration Objects
            subgraph ConfigurationObjects ["Configuration Objects"]
                FeatureConfig["⚙️ [Feature] Configuration<br/><<ValueObject>>"]
                StrategyConfig["🎯 Strategy Configuration<br/><<ValueObject>>"]
                SecurityConfig["🔒 Security Configuration<br/><<ValueObject>>"]
                PerformanceConfig["⚡ Performance Configuration<br/><<ValueObject>>"]
            end
            
            %% Configuration Management
            subgraph ConfigurationManagement ["Configuration Management"]
                ConfigBuilder["🏗️ Config Builder<br/><<Builder>>"]
                ConfigValidator["✅ Config Validator<br/><<Validator>>"]
                ConfigProvider["📦 Config Provider<br/><<Provider>>"]
            end
        end
    end
    
    %% ===== EXTERNAL DEPENDENCIES =====
    subgraph ExternalDependencies ["🌐 External Dependencies"]
        Logger["📝 Logger<br/><<Infrastructure>>"]
        MetricsProvider["📊 Metrics Provider<br/><<Infrastructure>>"]
        CacheProvider["💾 Cache Provider<br/><<Infrastructure>>"]
        DatabaseProvider["🗄️ Database Provider<br/><<Infrastructure>>"]
        SecurityProvider["🔒 Security Provider<br/><<Infrastructure>>"]
        ConfigProvider["⚙️ Config Provider<br/><<Infrastructure>>"]
    end
    
    %% ===== TEMPLATE RELATIONSHIPS (Universal Patterns) =====
    
    %% 1. FACADE ORCHESTRATION (Always present)
    FeatureFacade -->|uses| FeatureBuilder
    FeatureFacade -->|orchestrates| FeatureOrchestrator
    FeatureFacade -->|manages| ConfigurationManager
    FeatureFacade -->|selects| StrategyLayer
    FeatureFacade -->|executes| CommandLayer
    FeatureFacade -->|manages| StateMachineLayer
    FeatureFacade -->|publishes to| ObserverLayer
    FeatureFacade -->|applies| DecoratorLayer
    FeatureFacade -->|validates with| ValidationLayer
    FeatureFacade -->|adapts via| AdapterLayer
    FeatureFacade -->|uses| CoreComponents
    
    %% 2. BUILDER PATTERN (Configuration and Assembly)
    FeatureBuilder -->|builds| CoreComponents
    FeatureBuilder -->|configures| StrategyLayer
    FeatureBuilder -->|assembles| CommandLayer
    FeatureBuilder -->|initializes| StateMachineLayer
    FeatureBuilder -->|wires| ObserverLayer
    FeatureBuilder -->|applies| DecoratorLayer
    FeatureBuilder -->|sets up| ValidationLayer
    FeatureBuilder -->|creates| AdapterLayer
    
    %% 3. STRATEGY PATTERN (Behavioral Variants)
    ConcreteStrategyA -.->|implements| IPrimaryStrategy
    ConcreteStrategyB -.->|implements| IPrimaryStrategy
    ConcreteStrategyC -.->|implements| IPrimaryStrategy
    SecondaryStrategyA -.->|implements| ISecondaryStrategy
    SecondaryStrategyB -.->|implements| ISecondaryStrategy
    SecondaryStrategyC -.->|implements| ISecondaryStrategy
    ErrorHandlingStrategy -.->|implements| ICrossCuttingStrategy
    SecurityStrategy -.->|implements| ICrossCuttingStrategy
    PerformanceStrategy -.->|implements| ICrossCuttingStrategy
    
    %% 4. COMMAND PATTERN (Operations)
    CreateCommand -.->|implements| IFeatureCommand
    UpdateCommand -.->|implements| IFeatureCommand
    DeleteCommand -.->|implements| IFeatureCommand
    ProcessCommand -.->|implements| IFeatureCommand
    InitializeCommand -.->|implements| IFeatureCommand
    ValidateCommand -.->|implements| IFeatureCommand
    CleanupCommand -.->|implements| IFeatureCommand
    RefreshCommand -.->|implements| IFeatureCommand
    
    CommandInvoker -->|queues| CommandQueue
    CommandQueue -->|processes| CommandProcessor
    CommandProcessor -->|logs| CommandHistory
    
    %% 5. STATE MACHINE PATTERN (Complex Workflows)
    FeatureStateMachine -->|manages| FeatureStates
    FeatureStateMachine -->|executes| StateTransitions
    FeatureStateMachine -->|uses| StateContext
    
    StartTransition -.->|implements| IStateTransition
    CompleteTransition -.->|implements| IStateTransition
    ErrorTransition -.->|implements| IStateTransition
    SuspendTransition -.->|implements| IStateTransition
    
    %% 6. OBSERVER PATTERN (Event Handling)
    BusinessEventListener -.->|implements| IEventListener
    AuditEventListener -.->|implements| IEventListener
    MetricsEventListener -.->|implements| IEventListener
    SecurityEventListener -.->|implements| IEventListener
    NotificationEventListener -.->|implements| IEventListener
    
    EventPublisher -->|publishes| FeatureEvents
    EventPublisher -->|notifies| EventListeners
    
    %% 7. DECORATOR PATTERN (Cross-Cutting Concerns)
    CachingDecorator -.->|extends| FeatureDecorator
    SecurityDecorator -.->|extends| FeatureDecorator
    AuditDecorator -.->|extends| FeatureDecorator
    MetricsDecorator -.->|extends| FeatureDecorator
    ValidationDecorator -.->|extends| FeatureDecorator
    RetryDecorator -.->|extends| FeatureDecorator
    TimeoutDecorator -.->|extends| FeatureDecorator
    
    %% 8. CHAIN OF RESPONSIBILITY (Validation)
    BusinessRule -.->|implements| IValidationRule
    SecurityRule -.->|implements| IValidationRule
    DataIntegrityRule -.->|implements| IValidationRule
    ComplianceRule -.->|implements| IValidationRule
    PerformanceRule -.->|implements| IValidationRule
    
    ValidationEngine -->|uses| ValidationChain
    ValidationChain -->|chains| ValidationRules
    
    %% 9. ADAPTER PATTERN (External Integration)
    DatabaseAdapter -.->|implements| IExternalAdapter
    CacheAdapter -.->|implements| IExternalAdapter
    ApiAdapter -.->|implements| IExternalAdapter
    FileSystemAdapter -.->|implements| IExternalAdapter
    MessageQueueAdapter -.->|implements| IExternalAdapter
    
    ConnectionPool -.->|implements| IConnectionManager
    ConnectionFactory -->|creates| ConnectionPool
    
    %% 10. FACTORY PATTERN (Object Creation)
    EntityFactory -->|creates| DomainEntities
    StrategyFactory -->|creates| StrategyLayer
    AdapterFactory -->|creates| AdapterLayer
    
    %% 11. REPOSITORY PATTERN (Data Access)
    EntityRepository -.->|implements| IRepository
    CachedRepository -.->|decorates| EntityRepository
    
    %% 12. EXTERNAL DEPENDENCIES (Infrastructure)
    CoreComponents -->|uses| Logger
    EventListeners -->|uses| MetricsProvider
    DecoratorLayer -->|uses| CacheProvider
    AdapterLayer -->|uses| DatabaseProvider
    ValidationLayer -->|uses| SecurityProvider
    ConfigurationLayer -->|uses| ConfigProvider