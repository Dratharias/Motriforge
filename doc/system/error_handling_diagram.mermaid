classDiagram
    %% ===== ABSTRACT BASE CLASS =====
    class BaseError {
        <<abstract>>
        +code: string
        +severity: Severity
        +timestamp: Date
        +context?: string
        +origin?: string
        +traceId?: string
        +userId?: string
        +constructor(message, code, severity, context?, traceId?, userId?)
        +toJSON(): Record~string, unknown~
        +wrap(type: ErrorType, metadata?): IErrorWrapper
    }

    %% ===== CONCRETE ERROR TYPES =====
    class ValidationError {
        +field: string
        +value: unknown
        +rule: string
        +constructor(field, value, rule, message, context?, traceId?, userId?)
        +getDetails(): (field, value, rule, message)
        +isFieldError(fieldName: string): boolean
        +toJSON(): Record~string, unknown~
    }

    class AuthenticationError {
        +userId: string
        +attemptedAction: string
        +constructor(userId, attemptedAction, message, context?, traceId?)
        +getSecurityLevel(): Severity
        +shouldTriggerLockout(attemptCount: number): boolean
        +toJSON(): Record~string, unknown~
    }

    class AuthorizationError {
        +userId: string
        +resource: ResourceType | string
        +action: Action | string
        +constructor(userId, resource, action, message, context?, traceId?)
        +getReason(): string
        +isPrivilegeEscalation(): boolean
        +toJSON(): Record~string, unknown~
    }

    class DatabaseError {
        +query: string
        +operation: string
        +table?: string
        +originalError: Error
        +constructor(query, operation, originalError, table?, context?, traceId?, userId?)
        +isRetryable(): boolean
        +isConnectionError(): boolean
        +getRetryDelay(): number
        +toJSON(): Record~string, unknown~
    }

    class NetworkError {
        +url: string
        +method: string
        +statusCode?: number
        +originalError: Error
        +constructor(url, method, originalError, statusCode?, context?, traceId?, userId?)
        +isTimeout(): boolean
        +isRetryable(): boolean
        +isClientError(): boolean
        +isServerError(): boolean
        +getRetryDelay(): number
        +toJSON(): Record~string, unknown~
    }

    %% ===== ERROR FACTORY =====
    class ErrorFactory {
        <<static>>
        +createValidationError(field, value, rule, message?, context?, traceId?, userId?): ValidationError
        +createAuthenticationError(userId, attemptedAction, reason?, context?, traceId?): AuthenticationError
        +createAuthorizationError(userId, resource, action, reason?, context?, traceId?): AuthorizationError
        +createDatabaseError(operation, query, originalError, table?, context?, traceId?, userId?): DatabaseError
        +createNetworkError(url, method, originalError, statusCode?, context?, traceId?, userId?): NetworkError
        +createFromUnknown(error: unknown, context?, traceId?, userId?): BaseError
    }

    %% ===== ERROR AGGREGATOR =====
    class ErrorAggregator {
        -errors: BaseError[]
        +add(error: BaseError): void
        +addAll(errors: readonly BaseError[]): void
        +getAll(): readonly BaseError[]
        +getBySeverity(severity: Severity): readonly BaseError[]
        +getByType~T~(ctor: new(...args) => T): T[]
        +getValidationErrorsByField(): Record~string, ValidationError[]~
        +hasCriticalErrors(): boolean
        +hasErrorsAboveSeverity(minSeverity: Severity): boolean
        +getStatistics(): (total, bySeverity, byCode, byUserId, timeRange)
        +clear(): void
        +getMostRecent(): BaseError | null
        +getOldest(): BaseError | null
    }

    %% ===== ERROR CONTEXT BUILDER =====
    class ErrorContextBuilder {
        -traceId: string
        -userId?: string
        -sessionId?: string
        -requestId?: string
        -operationName?: string
        -source?: string
        -metadata?: Record~string, unknown~
        +constructor(traceId?: string)
        +setUserId(userId: string): this
        +setSessionId(sessionId: string): this
        +setRequestId(requestId: string): this
        +setOperationName(operationName: string): this
        +setSource(source: string): this
        +addMetadata(key: string, value: unknown): this
        +setMetadata(metadata: Record~string, unknown~): this
        +build(): ErrorContext
        +createChild(): ErrorContextBuilder
        +create(traceId?: string): ErrorContextBuilder
        +fromHttpHeaders(headers: Record~string, string~): ErrorContextBuilder
    }

    class ErrorContext {
        <<interface>>
        +traceId: string
        +userId?: string
        +sessionId?: string
        +requestId?: string
        +operationName?: string
        +source?: string
        +metadata?: Record~string, unknown~
    }

    %% ===== ERROR FORMATTER =====
    class ErrorFormatter {
        <<static>>
        +formatForConsole(error: BaseError): string
        +formatForLogging(error: BaseError): Record~string, unknown~
        +formatForUser(error: BaseError): (message, code, timestamp, canRetry)
        +formatErrorSummary(errors: readonly BaseError[]): (total, bySeverity, byType, criticalErrors)
        -getSpecificFields(error: BaseError): Record~string, unknown~
        -getSanitizedMessage(error: BaseError): string
        -isRetryable(error: BaseError): boolean
    }

    %% ===== ERROR MAPPER =====
    class ErrorMapper {
        <<static>>
        +toIError(error: BaseError): IError
        +toHttpResponse(error: BaseError): (status, body)
        +toLogFormat(error: BaseError): (level, message, error, context?, traceId?, userId?)
        +wrapError(error: BaseError, metadata?): IErrorWrapper
        -getHttpStatus(error: BaseError): number
        -determineErrorType(error: BaseError): ErrorType
    }

    %% ===== INTERFACES =====
    class IError {
        <<interface>>
        +code: string
        +message: string
        +severity: Severity
        +timestamp: Date
        +context?: string
        +origin?: string
        +stack?: string
        +traceId?: string
        +userId?: string
    }

    class IErrorWrapper {
        <<interface>>
        +type: ErrorType
        +error: IError
        +metadata?: Record~string, unknown~
    }

    %% ===== RELATIONSHIPS =====
    BaseError <|-- ValidationError
    BaseError <|-- AuthenticationError
    BaseError <|-- AuthorizationError
    BaseError <|-- DatabaseError
    BaseError <|-- NetworkError

    BaseError ..|> IError
    ErrorContextBuilder --> ErrorContext : creates
    ErrorAggregator --> BaseError : manages
    ErrorFactory --> ValidationError : creates
    ErrorFactory --> AuthenticationError : creates
    ErrorFactory --> AuthorizationError : creates
    ErrorFactory --> DatabaseError : creates
    ErrorFactory --> NetworkError : creates
    ErrorFactory --> BaseError : creates
    ErrorFormatter --> BaseError : formats
    ErrorMapper --> BaseError : maps
    ErrorMapper --> IError : maps to
    ErrorMapper --> IErrorWrapper : creates
    BaseError --> IErrorWrapper : wraps to

    %% ===== ENUM USAGE NOTES =====
    note for BaseError "Uses: Severity, ErrorType enums"
    note for AuthorizationError "Uses: ResourceType, Action enums"
    note for ValidationError "Uses: Severity enum"