classDiagram
    %% ===== CORE ENUMS =====
    class Role {
        <<enumeration>>
        ADMIN
        TRAINER
        CLIENT
        MANAGER
        GUEST
    }
    
    class ResourceType {
        <<enumeration>>
        EXERCISE
        WORKOUT
        PROGRAM
        PROFILE
        DASHBOARD
        PROGRESS
        ACTIVITY
        NUTRITION
        SCHEDULE
    }
    
    class Action {
        <<enumeration>>
        CREATE
        READ
        UPDATE
        ARCHIVE
        DELETE
        SHARE
        ACCESS
        EXPORT
        ASSIGN
        RESTORE
    }

    class Status {
        <<enumeration>>
        DRAFT
        ACTIVE
        INACTIVE
        PENDING
        SUSPENDED
        ARCHIVED
        PUBLISHED
        UNDER_REVIEW
    }

    %% ===== EXERCISE DOMAIN ENUMS =====
    class ExerciseType {
        <<enumeration>>
        STRENGTH
        CARDIO
        FLEXIBILITY
        BALANCE
        ENDURANCE
        REHABILITATION
        FUNCTIONAL
        SPORTS_SPECIFIC
    }

    class Difficulty {
        <<enumeration>>
        BEGINNER_I
        BEGINNER_II
        BEGINNER_III
        INTERMEDIATE_I
        INTERMEDIATE_II
        INTERMEDIATE_III
        ADVANCED_I
        ADVANCED_II
        ADVANCED_III
        MASTER
    }

    class MuscleZone {
        <<enumeration>>
        ANKLE
        KNEE
        HIP
        CALF
        SHOULDER
        NECK
        CHEST
        BACK
        ABS
        FOREARM
        BICEPS
        TRICEPS
        GLUTES
        QUADRICEPS
        HAMSTRINGS
        CORE
    }

    class MuscleType {
        <<enumeration>>
        TENDON
        MUSCLE
        LIGAMENT
    }

    class MuscleLevel {
        <<enumeration>>
        COMMON
        UNCOMMON
        MEDICAL
    }

    class EquipmentCategory {
        <<enumeration>>
        FREE_WEIGHTS
        MACHINES
        CARDIO
        BODYWEIGHT
        RESISTANCE_BANDS
        REHABILITATION
        FUNCTIONAL
    }

    %% ===== WORKOUT DOMAIN ENUMS =====
    class WorkoutStatus {
        <<enumeration>>
        DRAFT
        ACTIVE
        SCHEDULED
        IN_PROGRESS
        COMPLETED
        PAUSED
        CANCELLED
        ARCHIVED
        PUBLISHED
        TEMPLATE
    }

    class WorkoutType {
        <<enumeration>>
        STRENGTH_TRAINING
        CARDIO
        FLEXIBILITY
        REHABILITATION
        CIRCUIT
        HIIT
        ENDURANCE
        RECOVERY
    }

    class SetType {
        <<enumeration>>
        REGULAR
        WARM_UP
        DROP_SET
        SUPER_SET
        REST_PAUSE
        CLUSTER
        FAILURE
    }

    %% ===== PROGRAM DOMAIN ENUMS =====
    class ProgramType {
        <<enumeration>>
        REHABILITATION
        FITNESS
        STRENGTH
        WEIGHT_LOSS
        MUSCLE_GAIN
        ENDURANCE
        SPORT_SPECIFIC
        MAINTENANCE
        INJURY_PREVENTION
    }

    class ProgramStatus {
        <<enumeration>>
        DRAFT
        ACTIVE
        COMPLETED
        PAUSED
        CANCELLED
        ARCHIVED
        PUBLISHED
        TEMPLATE
        UNDER_REVIEW
    }

    class ProgramPhase {
        <<enumeration>>
        FOUNDATION
        BUILDING
        INTENSIFICATION
        PEAK
        RECOVERY
        MAINTENANCE
    }

    %% ===== PROGRESS DOMAIN ENUMS =====
    class ProgressMetric {
        <<enumeration>>
        WEIGHT
        REPS
        TIME
        DISTANCE
        HEART_RATE
        PAIN_LEVEL
        SATISFACTION
        STRENGTH_INDEX
        ENDURANCE_INDEX
        FLEXIBILITY_SCORE
        BODY_COMPOSITION
    }

    class MeasurementUnit {
        <<enumeration>>
        KG
        LBS
        SECONDS
        MINUTES
        KILOMETERS
        MILES
        BPM
        PERCENTAGE
        SCALE_1_10
        INCHES
        CENTIMETERS
    }

    class MediaType {
        <<enumeration>>
        IMAGE
        VIDEO
        AUDIO
        DOCUMENT
        ANIMATION
    }

    class MediaQuality {
        <<enumeration>>
        THUMBNAIL
        LOW
        MEDIUM
        HIGH
        ORIGINAL
    }

    %% ===== BASE DOMAIN INTERFACES =====
    class IEntity {
        <<interface>>
        +id: Types.ObjectId
        +createdAt: Date
        +updatedAt: Date
        +createdBy: Types.ObjectId // User
        +isActive: boolean
        +isDraft: boolean
    }

    class IUser {
        <<interface>>
        +id: Types.ObjectId
        +email: string
        +role: Role
        +organization: Types.ObjectId // Organization
    }

    class IValidatable {
        <<interface>>
        +validate(): ValidationResult
        +validateDraft(): ValidationResult
        +isValid(): boolean
        +isDraftValid(): boolean
        +getValidationErrors(): ValidationError[]
        +getDraftValidationErrors(): ValidationError[]
    }

    class ValidationResult {
        <<interface>>
        +isValid: boolean
        +errors: ValidationError[]
        +warnings: ValidationWarning[]
        +isDraftValid: boolean
        +requiredForPublication: string[]
        +canSaveDraft(): boolean
        +canPublish(): boolean
    }

    class ValidationError {
        <<interface>>
        +field: string
        +message: string
        +code: string
        +severity: ValidationSeverity
        +context?: any
    }

    class ValidationWarning {
        <<interface>>
        +field: string
        +message: string
        +suggestion?: string
    }

    class ValidationSeverity {
        <<enumeration>>
        CRITICAL
        ERROR
        WARNING
        INFO
    }

    class ICloneable~T~ {
        <<interface>>
        +clone(): T
        +cloneWithModifications(modifications: Partial~T~): T
    }

    class IShareable {
        <<interface>>
        +canBeSharedWith(user: IUser): boolean
        +share(targetUser: IUser, permissions: Action[]): SharedResource
    }

    class IDraftable {
        <<interface>>
        +isDraft: boolean
        +validateForPublication(): ValidationResult
        +canBePublished(): boolean
        +publish(): void
        +saveDraft(): void
        +getDraftPreview(): IDraftPreview
        +getPublicationRequirements(): string[]
    }

    class IDraftPreview {
        <<interface>>
        +completionPercentage: number
        +missingRequiredFields: string[]
        +optionalFieldsCompleted: string[]
        +estimatedTimeToComplete: number
        +lastModified: Date
    }

    class IArchivable {
        <<interface>>
        +archive(): void
        +restore(): void
        +canBeDeleted(): boolean
        +getAssociationCount(): number
    }

    class IVersionable {
        <<interface>>
        +version: number
        +previousVersions: Types.ObjectId[]
        +createVersion(): T
        +getPreviousVersion(version: number): T
    }

    %% ===== CORE DOMAIN ENTITIES =====
    class User {
        +id: Types.ObjectId
        +email: string
        +firstName: string
        +lastName: string
        +role: Role
        +status: Status
        +organization: Types.ObjectId // Organization
        +profile: UserProfile
        +preferences: UserPreferences
        +createdAt: Date
        +lastActiveAt: Date
        +getFullName(): string
        +canAccess(resource: ResourceType, action: Action): boolean
        +updateLastActive(): void
        +isActive(): boolean
    }

    class UserProfile {
        +id: Types.ObjectId
        +userId: Types.ObjectId // User
        +dateOfBirth?: Date
        +gender?: string
        +height?: IMeasurement
        +weight?: IMeasurement
        +medicalConditions: string[]
        +injuries: InjuryRecord[]
        +fitnessGoals: FitnessGoal[]
        +emergencyContact: IEmergencyContact
        +updatedAt: Date
        +getAge(): number
        +getBMI(): number
        +hasInjury(bodyPart: MuscleZone): boolean
    }

    class UserPreferences {
        +id: Types.ObjectId
        +userId: Types.ObjectId // User
        +preferredUnits: MeasurementUnit
        +defaultWorkoutType: WorkoutType
        +reminderSettings: IReminderSettings
        +privacySettings: IPrivacySettings
        +accessibilitySettings: IAccessibilitySettings
        +updatedAt: Date
    }

    class Organization {
        +id: Types.ObjectId
        +name: string
        +type: string
        +status: Status
        +settings: IOrganizationSettings
        +subscription: ISubscriptionInfo
        +createdAt: Date
        +updatedAt: Date
        +addMember(user: User): void
        +removeMember(userId: Types.ObjectId): void
        +getMemberCount(): number
        +isActive(): boolean
    }

    %% ===== MUSCLE & ANATOMY DOMAIN =====
    class Muscle {
        +id: Types.ObjectId
        +name: string
        +conventionalName: string
        +latinTerm: string
        +zone: MuscleZone
        +type: MuscleType
        +level: MuscleLevel
        +parentMuscle?: Types.ObjectId // Muscle
        +subMuscles: Types.ObjectId[] // Muscle[]
        +description: string
        +getHierarchy(): Muscle[]
        +isPartOf(muscle: Muscle): boolean
    }

    class MuscleGroup {
        +id: Types.ObjectId
        +name: string
        +muscles: Types.ObjectId[] // Muscle[]
        +primaryZones: MuscleZone[]
        +description: string
        +getMuscles(): Promise~Muscle[]~
        +contains(muscle: Muscle): boolean
        +getOverlapWith(other: MuscleGroup): number
    }

    class TargetMuscle {
        +primaryTargets: Types.ObjectId[] // Muscle[]
        +secondaryTargets: Types.ObjectId[] // Muscle[]
        +stabilizers: Types.ObjectId[] // Muscle[]
        +synergists: Types.ObjectId[] // Muscle[]
        +getPrimaryMuscles(): Promise~Muscle[]~
        +getSecondaryMuscles(): Promise~Muscle[]~
        +getTotalMuscleEngagement(): number
        +hasOverlapWith(other: TargetMuscle): boolean
    }

    %% ===== EQUIPMENT DOMAIN =====
    class Equipment {
        +id: Types.ObjectId
        +name: string
        +category: EquipmentCategory
        +description: string
        +media: Types.ObjectId[] // Media[]
        +specifications: IEquipmentSpecs
        +alternatives: Types.ObjectId[] // Equipment[]
        +maintenanceInfo: IMaintenanceInfo
        +isAvailable: boolean
        +organization: Types.ObjectId // Organization
        +createdAt: Date
        +updatedAt: Date
        +getAlternatives(): Promise~Equipment[]~
        +isCompatibleWith(exercise: Exercise): boolean
    }

    %% ===== MEDIA DOMAIN =====
    class Media {
        +id: Types.ObjectId
        +url: string
        +type: MediaType
        +title?: string
        +description?: string
        +metadata: IMediaMetadata
        +associatedTo: Types.ObjectId[] // Exercise[] | Workout[] | etc
        +organization: Types.ObjectId // Organization
        +uploadedBy: Types.ObjectId // User
        +createdAt: Date
        +isAccessibleBy(user: IUser): boolean
        +getProcessedUrl(quality?: MediaQuality): string
    }

    %% ===== EXERCISE DOMAIN =====
    class Exercise {
        +id: Types.ObjectId
        +name: string
        +description?: string
        +type?: ExerciseType
        +instructions: ExerciseInstruction[]
        +targetMuscles?: TargetMuscle
        +equipment: Types.ObjectId[] // Equipment[]
        +difficulty?: Difficulty
        +media: Types.ObjectId[] // Media[]
        +alternatives: Types.ObjectId[] // Exercise[]
        +progressions?: ExerciseProgression
        +contraindications: IContraindication[]
        +tags: string[]
        +organization: Types.ObjectId // Organization
        +createdBy: Types.ObjectId // User
        +status: Status
        +isDraft: boolean
        +createdAt: Date
        +updatedAt: Date
        +clone(): Exercise
        +canBePerformedBy(client: User): boolean
        +getAlternatives(): Promise~Exercise[]~
        +getProgressions(): ExerciseProgression
        +validateForPublication(): ValidationResult
        +canBePublished(): boolean
        +publish(): void
        +saveDraft(): void
    }

    class ExerciseInstruction {
        +id: Types.ObjectId
        +exerciseId: Types.ObjectId // Exercise
        +stepNumber: number
        +instruction: string
        +cues: string[]
        +commonMistakes: string[]
        +safetyNotes: string[]
        +media?: Types.ObjectId // Media
        +duration?: number
    }

    class ExerciseProgression {
        +id: Types.ObjectId
        +exerciseId: Types.ObjectId // Exercise
        +regressions: Types.ObjectId[] // Exercise[]
        +progressions: Types.ObjectId[] // Exercise[]
        +variations: Types.ObjectId[] // Exercise[]
        +difficultyOrder: IDifficultyLevel[]
        +getNextProgression(currentLevel: Difficulty): Exercise
        +getPreviousRegression(currentLevel: Difficulty): Exercise
    }

    %% ===== WORKOUT DOMAIN =====
    class Workout {
        +id: Types.ObjectId
        +name: string
        +description?: string
        +type?: WorkoutType
        +status: WorkoutStatus
        +exercises: WorkoutExercise[]
        +warmUp?: WorkoutSection
        +coolDown?: WorkoutSection
        +estimatedDuration?: number
        +actualDuration?: number
        +tags: string[]
        +createdBy: Types.ObjectId // User
        +assignedTo?: Types.ObjectId // User
        +scheduledDate?: Date
        +startedAt?: Date
        +completedAt?: Date
        +notes: string
        +organization: Types.ObjectId // Organization
        +isDraft: boolean
        +createdAt: Date
        +updatedAt: Date
        +addExercise(exercise: Exercise, config: IExerciseConfig): void
        +removeExercise(exerciseId: Types.ObjectId): void
        +start(): void
        +complete(): void
        +pause(): void
        +resume(): void
        +getDuration(): number
        +getTotalExercises(): number
        +getProgress(): number
        +validateForPublication(): ValidationResult
        +canBePublished(): boolean
        +publish(): void
        +saveDraft(): void
    }

    class WorkoutExercise {
        +id: Types.ObjectId
        +workoutId: Types.ObjectId // Workout
        +exerciseId: Types.ObjectId // Exercise
        +order: number
        +sets: ExerciseSet[]
        +restBetweenSets: number
        +notes: string
        +completed: boolean
        +startedAt?: Date
        +completedAt?: Date
        +addSet(setConfig: ISetConfig): void
        +removeSet(setId: Types.ObjectId): void
        +markCompleted(): void
        +getTargetVolume(): number
        +getActualVolume(): number
        +getProgress(): number
    }

    class ExerciseSet {
        +id: Types.ObjectId
        +workoutExerciseId: Types.ObjectId // WorkoutExercise
        +setNumber: number
        +type: SetType
        +targetReps?: number
        +targetWeight?: IMeasurement
        +targetDuration?: number
        +targetDistance?: IMeasurement
        +actualReps?: number
        +actualWeight?: IMeasurement
        +actualDuration?: number
        +actualDistance?: IMeasurement
        +rpe?: number
        +completed: boolean
        +notes: string
        +startedAt?: Date
        +completedAt?: Date
        +markCompleted(actual: IActualPerformance): void
        +getIntensity(): number
        +getVolume(): number
    }

    class WorkoutSection {
        +id: Types.ObjectId
        +name: string
        +exercises: Types.ObjectId[] // Exercise[]
        +duration: number
        +instructions: string[]
        +isRequired: boolean
    }

    %% ===== PROGRAM DOMAIN =====
    class Program {
        +id: Types.ObjectId
        +name: string
        +description?: string
        +type?: ProgramType
        +status: ProgramStatus
        +phases: ProgramPhase[]
        +workouts: Types.ObjectId[] // Workout[]
        +duration?: number
        +difficulty?: Difficulty
        +goals: FitnessGoal[]
        +prerequisites: string[]
        +createdBy: Types.ObjectId // User
        +assignedTo?: Types.ObjectId[] // User[]
        +startDate?: Date
        +endDate?: Date
        +tags: string[]
        +organization: Types.ObjectId // Organization
        +isDraft: boolean
        +createdAt: Date
        +updatedAt: Date
        +addWorkout(workout: Workout, phase: ProgramPhase): void
        +removeWorkout(workoutId: Types.ObjectId): void
        +assign(clientId: Types.ObjectId, startDate: Date): Assignment
        +getProgress(clientId: Types.ObjectId): number
        +getNextWorkout(clientId: Types.ObjectId): Workout
        +getCurrentPhase(clientId: Types.ObjectId): ProgramPhase
        +validateForPublication(): ValidationResult
        +canBePublished(): boolean
        +publish(): void
        +saveDraft(): void
    }

    class ProgramPhaseDetail {
        +id: Types.ObjectId
        +programId: Types.ObjectId // Program
        +phase: ProgramPhase
        +name: string
        +description: string
        +duration: number
        +workouts: Types.ObjectId[] // Workout[]
        +goals: string[]
        +focusAreas: MuscleZone[]
        +intensityLevel: number
        +order: number
    }

    class Assignment {
        +id: Types.ObjectId
        +programId?: Types.ObjectId // Program
        +workoutId?: Types.ObjectId // Workout
        +trainerId: Types.ObjectId // User
        +clientId: Types.ObjectId // User
        +resourceType: ResourceType
        +assignedAt: Date
        +dueDate?: Date
        +startedAt?: Date
        +completedAt?: Date
        +progress: number
        +notes: string
        +isActive: boolean
        +organization: Types.ObjectId // Organization
        +complete(): void
        +start(): void
        +updateProgress(progress: number): void
        +isOverdue(): boolean
        +getDaysRemaining(): number
    }

    %% ===== PROGRESS DOMAIN =====
    class ProgressRecord {
        +id: Types.ObjectId
        +userId: Types.ObjectId // User
        +exerciseId?: Types.ObjectId // Exercise
        +workoutId?: Types.ObjectId // Workout
        +programId?: Types.ObjectId // Program
        +metric: ProgressMetric
        +value: number
        +unit: MeasurementUnit
        +context: IProgressContext
        +recordedAt: Date
        +notes: string
        +attachments: Types.ObjectId[] // Media[]
        +verified: boolean
        +verifiedBy?: Types.ObjectId // User
        +createdBy: Types.ObjectId // User
        +organization: Types.ObjectId // Organization
        +isValid(): boolean
        +compareWith(other: ProgressRecord): number
        +getPercentageChange(baseline: ProgressRecord): number
    }

    class ProgressAnalysis {
        +id: Types.ObjectId
        +userId: Types.ObjectId // User
        +metric: ProgressMetric
        +startDate: Date
        +endDate: Date
        +records: Types.ObjectId[] // ProgressRecord[]
        +trend: ITrendAnalysis
        +insights: IProgressInsight[]
        +recommendations: IRecommendation[]
        +generatedAt: Date
        +generateTrend(): ITrendAnalysis
        +getInsights(): IProgressInsight[]
        +getRecommendations(): IRecommendation[]
    }

    class FitnessGoal {
        +id: Types.ObjectId
        +userId: Types.ObjectId // User
        +title: string
        +description: string
        +type: GoalType
        +category: GoalCategory
        +targetMetric?: ProgressMetric
        +targetValue?: number
        +currentValue?: number
        +unit?: MeasurementUnit
        +deadline: Date
        +priority: GoalPriority
        +status: GoalStatus
        +milestones: GoalMilestone[]
        +subGoals: SubGoal[]
        +exerciseGoal?: ExerciseGoal
        +parentGoalId?: Types.ObjectId // FitnessGoal
        +childGoals: Types.ObjectId[] // FitnessGoal[]
        +tags: string[]
        +createdAt: Date
        +updatedAt: Date
        +getProgress(): number
        +isAchieved(): boolean
        +getDaysRemaining(): number
        +addMilestone(milestone: GoalMilestone): void
        +addSubGoal(subGoal: SubGoal): void
        +getOverallCompletion(): number
        +canBeAchieved(): boolean
    }

    class ExerciseGoal {
        +id: Types.ObjectId
        +goalId: Types.ObjectId // FitnessGoal
        +exerciseId: Types.ObjectId // Exercise
        +targetProgression?: Types.ObjectId // Exercise (progression target)
        +currentProgression?: Types.ObjectId // Exercise (current level)
        +masteryRequirements: MasteryRequirement[]
        +technicalGoals: TechnicalGoal[]
        +performanceMetrics: ExercisePerformanceMetric[]
        +contextConditions?: IExerciseContext
        +validationCriteria: IValidationCriteria[]
        +createdAt: Date
        +updatedAt: Date
        +getCurrentLevel(): Exercise
        +getNextProgression(): Exercise
        +canProgressTo(exercise: Exercise): boolean
        +evaluateProgression(): ProgressionEvaluation
        +isExerciseMastered(): boolean
    }

    class SubGoal {
        +id: Types.ObjectId
        +parentGoalId: Types.ObjectId // FitnessGoal
        +title: string
        +description?: string
        +type: SubGoalType
        +metricType: GoalMetricType
        +targetValue: any
        +currentValue?: any
        +unit?: MeasurementUnit
        +weight: number
        +deadline?: Date
        +status: GoalStatus
        +dependsOn: Types.ObjectId[] // SubGoal[]
        +exerciseId?: Types.ObjectId // Exercise
        +measurementContext?: IMeasurementContext
        +validationRules: IValidationRule[]
        +createdAt: Date
        +updatedAt: Date
        +getProgress(): number
        +isAchieved(): boolean
        +canBeAttempted(): boolean
        +validateAchievement(value: any): boolean
    }

    class MasteryRequirement {
        +id: Types.ObjectId
        +exerciseGoalId: Types.ObjectId // ExerciseGoal
        +type: MasteryType
        +description: string
        +criteria: IMasteryCriteria
        +weight: number
        +isRequired: boolean
        +timeframe?: number
        +contextRequirements?: IContextRequirement[]
        +evaluate(performanceData: IPerformanceData): MasteryEvaluation
        +isMet(): boolean
    }

    class TechnicalGoal {
        +id: Types.ObjectId
        +exerciseGoalId: Types.ObjectId // ExerciseGoal
        +aspect: TechnicalAspect
        +description: string
        +targetScore: number
        +currentScore?: number
        +evaluationMethod: EvaluationMethod
        +assessmentFrequency: AssessmentFrequency
        +improvementPlan: string[]
        +lastAssessment?: Date
        +nextAssessment?: Date
        +isSubjective: boolean
        +evaluate(): TechnicalEvaluation
        +needsAssessment(): boolean
    }

    class ExercisePerformanceMetric {
        +id: Types.ObjectId
        +exerciseGoalId: Types.ObjectId // ExerciseGoal
        +metric: PerformanceMetricType
        +targetValue: number
        +currentValue?: number
        +unit: MeasurementUnit
        +measurementMethod: MeasurementMethod
        +baseline?: number
        +improvementRate?: number
        +plateauThreshold?: number
        +contextFactors: IContextFactor[]
        +trackingHistory: IMetricHistory[]
        +getImprovement(): number
        +isImproving(): boolean
        +hasPlateaued(): boolean
        +predictTarget(timeframe: number): number
    }

    %% ===== INJURY & HEALTH DOMAIN =====
    class InjuryRecord {
        +id: Types.ObjectId
        +userId: Types.ObjectId // User
        +type: InjuryType
        +bodyPart: MuscleZone
        +severity: InjurySeverity
        +description: string
        +dateOccurred: Date
        +dateHealed?: Date
        +treatment: string[]
        +restrictions: IExerciseRestriction[]
        +status: InjuryStatus
        +verifiedBy?: Types.ObjectId // User
        +notes: string
        +isActive(): boolean
        +affectsExercise(exercise: Exercise): boolean
        +getRestrictions(): IExerciseRestriction[]
    }

    %% ===== SHARING & PERMISSIONS =====
    class SharedResource {
        +id: Types.ObjectId
        +resourceId: Types.ObjectId // Exercise | Workout | Program
        +resourceType: ResourceType
        +owner: Types.ObjectId // User
        +sharedWith: Types.ObjectId[] // User[]
        +allowedActions: Action[]
        +startDate: Date
        +endDate?: Date
        +conditions: IShareCondition[]
        +archived: boolean
        +notes: string
        +createdAt: Date
        +isValid(): boolean
        +hasExpired(): boolean
        +canUserAccess(user: IUser, action: Action): boolean
        +addSharedUser(user: IUser): void
        +removeSharedUser(userId: Types.ObjectId): void
        +archive(): void
    }

    %% ===== INTERFACE DEFINITIONS =====
    class IMeasurement {
        <<interface>>
        +value: number
        +unit: MeasurementUnit
    }

    class IProgressContext {
        <<interface>>
        +sessionId?: Types.ObjectId // WorkoutSession
        +environmentConditions?: IEnvironmentConditions
        +equipmentUsed?: Types.ObjectId[] // Equipment[]
        +trainingPartner?: Types.ObjectId // User
        +mood?: number
        +energyLevel?: number
    }

    class IEquipmentSpecs {
        <<interface>>
        +weight?: IMeasurement
        +dimensions?: IDimensions
        +capacity?: IMeasurement
        +features?: string[]
        +safetyFeatures?: string[]
    }

    class IDimensions {
        <<interface>>
        +length: number
        +width: number
        +height: number
        +unit: MeasurementUnit
    }

    class IMaintenanceInfo {
        <<interface>>
        +lastMaintenance?: Date
        +nextMaintenance?: Date
        +maintenanceHistory: IMaintenanceRecord[]
    }

    class IMaintenanceRecord {
        <<interface>>
        +date: Date
        +type: string
        +performedBy: string
        +notes?: string
        +cost?: number
    }

    class IMediaMetadata {
        <<interface>>
        +fileSize: number
        +duration?: number
        +resolution?: IResolution
        +format: string
        +compressionInfo?: ICompressionInfo
    }

    class IResolution {
        <<interface>>
        +width: number
        +height: number
    }

    class ICompressionInfo {
        <<interface>>
        +originalSize: number
        +compressionRatio: number
        +codec: string
    }

    class IContraindication {
        <<interface>>
        +condition: string
        +severity: string
        +reason: string
        +alternatives: Types.ObjectId[] // Exercise[]
    }

    class IDifficultyLevel {
        <<interface>>
        +difficulty: Difficulty
        +exerciseId: Types.ObjectId // Exercise
        +order: number
    }

    class IExerciseConfig {
        <<interface>>
        +sets: number
        +reps?: number
        +weight?: IMeasurement
        +duration?: number
        +restTime: number
        +notes?: string
    }

    class ISetConfig {
        <<interface>>
        +type: SetType
        +targetReps?: number
        +targetWeight?: IMeasurement
        +targetDuration?: number
        +targetDistance?: IMeasurement
    }

    class IActualPerformance {
        <<interface>>
        +reps?: number
        +weight?: IMeasurement
        +duration?: number
        +distance?: IMeasurement
        +rpe?: number
    }

    class ITrendAnalysis {
        <<interface>>
        +direction: TrendDirection
        +slope: number
        +correlation: number
        +variability: number
        +dataPoints: number
    }

    class IProgressInsight {
        <<interface>>
        +type: InsightType
        +message: string
        +significance: number
        +supportingData: any
    }

    class IRecommendation {
        <<interface>>
        +type: RecommendationType
        +title: string
        +description: string
        +priority: number
        +actionItems: string[]
    }

    class IEnvironmentConditions {
        <<interface>>
        +temperature?: number
        +humidity?: number
        +altitude?: number
        +timeOfDay?: string
    }

    class IExerciseRestriction {
        <<interface>>
        +type: RestrictionType
        +affectedMovements: string[]
        +severity: string
        +alternatives: Types.ObjectId[] // Exercise[]
    }

    class IShareCondition {
        <<interface>>
        +type: string
        +value: any
        +operator: string
    }

    class IEmergencyContact {
        <<interface>>
        +name: string
        +relationship: string
        +phone: string
        +email?: string
    }

    class IReminderSettings {
        <<interface>>
        +workoutReminders: boolean
        +progressReminders: boolean
        +reminderTime: string
        +frequency: string
    }

    class IPrivacySettings {
        <<interface>>
        +shareProgress: boolean
        +shareWorkouts: boolean
        +publicProfile: boolean
        +dataRetention: number
    }

    class IAccessibilitySettings {
        <<interface>>
        +fontSize: string
        +highContrast: boolean
        +voiceInstructions: boolean
        +largeButtons: boolean
    }

    class IOrganizationSettings {
        <<interface>>
        +allowPublicSharing: boolean
        +dataRetentionDays: number
        +requireMedicalClearance: boolean
        +defaultPrivacyLevel: string
    }

    class ISubscriptionInfo {
        <<interface>>
        +plan: string
        +startDate: Date
        +endDate?: Date
        +features: string[]
        +memberLimit: number
        +storageLimit: number
    }

    %% ===== ADDITIONAL ENUMS =====
    class GoalType {
        <<enumeration>>
        STRENGTH
        ENDURANCE
        WEIGHT_LOSS
        MUSCLE_GAIN
        FLEXIBILITY
        PERFORMANCE
        REHABILITATION
        MAINTENANCE
        EXERCISE_SPECIFIC
        PROGRESSION_BASED
        TIME_BASED
        VOLUME_BASED
    }

    class GoalCategory {
        <<enumeration>>
        FITNESS
        PERFORMANCE
        HEALTH
        SKILL
        BODY_COMPOSITION
        CARDIOVASCULAR
        STRENGTH_POWER
        FLEXIBILITY_MOBILITY
    }

    class SubGoalType {
        <<enumeration>>
        EXERCISE_MASTERY
        WEIGHT_TARGET
        REP_TARGET
        TIME_TARGET
        DISTANCE_TARGET
        HOLD_DURATION
        PROGRESSION_STEP
        TECHNIQUE_IMPROVEMENT
        FREQUENCY_TARGET
        VOLUME_TARGET
        INTENSITY_TARGET
        VO2_MAX
        HEART_RATE_ZONE
        BODY_COMPOSITION
        PAIN_REDUCTION
        FLEXIBILITY_RANGE
        BALANCE_SCORE
        COORDINATION_LEVEL
    }

    class GoalMetricType {
        <<enumeration>>
        QUANTITATIVE
        QUALITATIVE
        BINARY
        SCALE
        PERCENTAGE
        DURATION
        FREQUENCY
        PROGRESSION_LEVEL
    }

    class GoalPriority {
        <<enumeration>>
        LOW
        MEDIUM
        HIGH
        CRITICAL
    }

    class GoalStatus {
        <<enumeration>>
        ACTIVE
        PAUSED
        ACHIEVED
        ABANDONED
        EXPIRED
    }

    class InjuryType {
        <<enumeration>>
        ACUTE
        CHRONIC
        OVERUSE
        TRAUMATIC
        DEGENERATIVE
    }

    class InjurySeverity {
        <<enumeration>>
        MINOR
        MODERATE
        SEVERE
        CRITICAL
    }

    class InjuryStatus {
        <<enumeration>>
        ACTIVE
        HEALING
        HEALED
        CHRONIC
        RECURRING
    }

    class TrendDirection {
        <<enumeration>>
        IMPROVING
        DECLINING
        STABLE
        FLUCTUATING
    }

    class InsightType {
        <<enumeration>>
        ACHIEVEMENT
        PLATEAU
        DECLINE
        PATTERN
        ANOMALY
    }

    class RecommendationType {
        <<enumeration>>
        EXERCISE_MODIFICATION
        PROGRAM_ADJUSTMENT
        REST_RECOMMENDATION
        NUTRITION_ADVICE
        MEDICAL_CONSULTATION
    }

    class MasteryType {
        <<enumeration>>
        TECHNIQUE_PROFICIENCY
        CONSISTENCY
        LOAD_PROGRESSION
        TIME_ENDURANCE
        FORM_QUALITY
        RANGE_OF_MOTION
        CONTROL_STABILITY
        POWER_OUTPUT
        COORDINATION
        BREATHING_PATTERN
    }

    class TechnicalAspect {
        <<enumeration>>
        FORM_ALIGNMENT
        MOVEMENT_PATTERN
        TIMING_RHYTHM
        BREATHING_TECHNIQUE
        MUSCLE_ACTIVATION
        JOINT_STABILITY
        CORE_ENGAGEMENT
        BALANCE_CONTROL
        COORDINATION
        EFFICIENCY
    }

    class EvaluationMethod {
        <<enumeration>>
        TRAINER_ASSESSMENT
        VIDEO_ANALYSIS
        MOTION_CAPTURE
        PRESSURE_PLATE
        EMG_ANALYSIS
        SELF_ASSESSMENT
        PEER_REVIEW
        OBJECTIVE_MEASUREMENT
        STANDARDIZED_TEST
    }

    class AssessmentFrequency {
        <<enumeration>>
        EVERY_SESSION
        WEEKLY
        BIWEEKLY
        MONTHLY
        QUARTERLY
        MILESTONE_BASED
        ON_DEMAND
        PROGRESS_DEPENDENT
    }

    class PerformanceMetricType {
        <<enumeration>>
        ONE_REP_MAX
        MULTIPLE_REP_MAX
        TIME_TO_EXHAUSTION
        HOLD_DURATION
        SPEED_VELOCITY
        POWER_OUTPUT
        HEART_RATE_RECOVERY
        VO2_MAX
        LACTATE_THRESHOLD
        VERTICAL_JUMP
        SPRINT_TIME
        FLEXIBILITY_RANGE
        BALANCE_SCORE
        REACTION_TIME
        COORDINATION_SCORE
    }

    class MeasurementMethod {
        <<enumeration>>
        DIRECT_MEASUREMENT
        CALCULATED_ESTIMATE
        TECHNOLOGY_ASSISTED
        TRAINER_OBSERVATION
        SELF_REPORTING
        STANDARDIZED_PROTOCOL
        EQUIPMENT_READOUT
        VIDEO_ANALYSIS
        WEARABLE_DEVICE
    }

    class GoalMilestone {
        +id: Types.ObjectId
        +goalId: Types.ObjectId // FitnessGoal
        +title: string
        +description?: string
        +targetValue: number
        +unit?: MeasurementUnit
        +dueDate?: Date
        +achievedAt?: Date
        +achievedValue?: number
        +isAchieved: boolean
        +order: number
        +weight: number
        +dependsOn: Types.ObjectId[] // GoalMilestone[]
        +relatedSubGoals: Types.ObjectId[] // SubGoal[]
        +validationMethod: string
        +notes?: string
        +getProgress(): number
        +canBeAttempted(): boolean
        +markAchieved(value: number): void
    }

    %% ===== RELATIONSHIPS =====

    %% Core Domain
    User ..|> IUser
    User ..|> IEntity
    User --> UserProfile : has
    User --> UserPreferences : has
    User --> Organization : belongs to
    
    Organization ..|> IEntity
    Organization ..|> IArchivable
    
    %% Exercise Domain
    Exercise ..|> IEntity
    Exercise ..|> ICloneable
    Exercise ..|> IShareable
    Exercise ..|> IArchivable
    Exercise ..|> IDraftable
    Exercise ..|> IValidatable
    Exercise --> TargetMuscle : targets
    Exercise --> Equipment : requires
    Exercise --> Media : includes
    Exercise --> ExerciseInstruction : contains
    Exercise --> ExerciseProgression : has
    
    ExerciseInstruction --> Exercise : belongs to
    ExerciseProgression --> Exercise : defines for
    
    TargetMuscle --> Muscle : references
    MuscleGroup --> Muscle : contains
    
    Equipment ..|> IEntity
    Equipment --> Media : includes
    
    Media ..|> IEntity
    
    %% Workout Domain
    Workout ..|> IEntity
    Workout ..|> ICloneable
    Workout ..|> IShareable
    Workout ..|> IArchivable
    Workout ..|> IDraftable
    Workout ..|> IValidatable
    Workout --> WorkoutExercise : contains
    Workout --> WorkoutSection : includes
    
    WorkoutExercise --> Exercise : references
    WorkoutExercise --> ExerciseSet : contains
    
    ExerciseSet --> WorkoutExercise : belongs to
    
    %% Program Domain
    Program ..|> IEntity
    Program ..|> IShareable
    Program ..|> IArchivable
    Program ..|> IDraftable
    Program ..|> IValidatable
    Program --> Workout : includes
    Program --> ProgramPhaseDetail : contains
    Program --> FitnessGoal : targets
    
    ProgramPhaseDetail --> Program : belongs to
    
    Assignment ..|> IEntity
    Assignment --> Program : references
    Assignment --> Workout : references
    Assignment --> User : trainer/client
    
    %% Progress Domain
    ProgressRecord ..|> IEntity
    ProgressRecord --> User : belongs to
    ProgressRecord --> Exercise : references
    ProgressRecord --> Workout : references
    ProgressRecord --> Program : references
    ProgressRecord --> Media : attachments
    
    ProgressAnalysis --> ProgressRecord : analyzes
    ProgressAnalysis --> User : for
    
    FitnessGoal ..|> IEntity
    FitnessGoal --> User : belongs to
    FitnessGoal --> GoalMilestone : contains
    FitnessGoal --> SubGoal : contains
    FitnessGoal --> ExerciseGoal : has
    FitnessGoal --> FitnessGoal : parent/child
    
    ExerciseGoal --> FitnessGoal : belongs to
    ExerciseGoal --> Exercise : targets
    ExerciseGoal --> Exercise : progression
    ExerciseGoal --> MasteryRequirement : contains
    ExerciseGoal --> TechnicalGoal : contains
    ExerciseGoal --> ExercisePerformanceMetric : contains
    
    SubGoal --> FitnessGoal : belongs to
    SubGoal --> Exercise : references
    SubGoal --> SubGoal : depends on
    
    MasteryRequirement --> ExerciseGoal : belongs to
    MasteryRequirement --> MasteryEvaluation : evaluated by
    
    TechnicalGoal --> ExerciseGoal : belongs to
    TechnicalGoal --> TechnicalEvaluation : evaluated by
    
    ExercisePerformanceMetric --> ExerciseGoal : belongs to
    
    ProgressionEvaluation --> ExerciseGoal : evaluates
    MasteryEvaluation --> MasteryRequirement : evaluates
    TechnicalEvaluation --> TechnicalGoal : evaluates
    
    %% Health Domain
    InjuryRecord ..|> IEntity
    InjuryRecord --> User : belongs to
    
    UserProfile --> InjuryRecord : contains
    UserProfile --> FitnessGoal : includes
    
    %% Sharing Domain
    SharedResource ..|> IEntity
    SharedResource --> User : owner/shared with