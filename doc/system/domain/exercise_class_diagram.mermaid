classDiagram
direction TB
    class ExerciseService {
	    -managementService: ExerciseManagementService
	    -analysisService: ExerciseAnalysisService
	    -workflowService: ExerciseWorkflowService
	    +createExercise(data, createdBy) Exercise
	    +updateExercise(id, updates) Exercise
	    +cloneExercise(sourceId, createdBy, modifications) Exercise
	    +deleteExercise(id) boolean
	    +archiveExercise(id) boolean
	    +findAlternatives(originalId, options, limit) AlternativesResult
	    +assessDifficulty(exercise) DifficultyAssessment
	    +calculateProgressionPath(exercise, current, target) ProgressionPath
	    +publishExercise(id, context) Exercise
	    +getPublicationReadiness(id) ReadinessResult
	    +submitForReview(id, submittedBy, notes) ReviewResult
	    +validateExerciseSafety(exerciseId, conditions) SafetyResult
	    +getExercisesForUser(userProfile, options) Exercise[]
	    +getRecommendedExercises(userPerformance, criteria, options) Exercise[]
	    +checkExercisePrerequisites(exerciseId, userPerformance) IPrerequisiteStatus[]
	    +searchExercises(criteria, options) Exercise[]
	    +getExerciseStatistics() IExerciseStatistics
    }

    class ExerciseManagementService {
	    -repository: IExerciseRepository
	    -validator: ExerciseValidator
	    +createExercise(data, createdBy) Exercise
	    +updateExercise(id, updates) Exercise
	    +cloneExercise(sourceId, createdBy, modifications) Exercise
	    +deleteExercise(id) boolean
	    +archiveExercise(id) boolean
	    +restoreExercise(id) boolean
	    -buildExercise(data, createdBy) Exercise
	    -generateUniqueCloneName(originalName) string
    }

    class ExerciseAnalysisService {
	    -repository: IExerciseRepository
	    +findAlternatives(originalId, options, limit) AlternativesResult
	    +assessDifficulty(exercise) DifficultyAssessment
	    +calculateProgressionPath(exercise, current, target) ProgressionPath
	    +getRecommendedExercises(userPerformance, criteria, options) Exercise[]
	    +evaluatePrerequisiteReadiness(exercise, userPerformance) number
	    -calculateSimilarity(original, candidate, preferences) number
	    -generateAlternativeReason(original, alternative, options) string
	    -getDifficultyLevel(difficulty) number
	    -getBaseDifficultyScore(difficulty) number
	    -calculateMuscleComplexity(exercise) number
	    -calculateEquipmentComplexity(exercise) number
	    -calculateInstructionComplexity(exercise) number
	    -scoreToDifficulty(score) Difficulty
	    -generateDifficultyReasoning(exercise, components) string[]
	    -calculateRecommendationScore(exercise, userPerformance) number
	    -assessPrerequisiteFulfillment(prerequisites, userPerformance) IPrerequisiteStatus[]
    }

    class ExerciseWorkflowService {
	    -repository: IExerciseRepository
	    -validator: ExerciseValidator
	    -publisher: ExercisePublisher
	    +publishExercise(id, context) Exercise
	    +getPublicationReadiness(id) ReadinessResult
	    +submitForReview(id, submittedBy, notes) ReviewResult
	    +validateExerciseSafety(exerciseId, conditions) SafetyResult
	    +getExercisesForUser(userProfile, options) Exercise[]
	    +getPersonalizedRecommendations(userId, userPerformance, preferences) Exercise[]
	    -estimateReviewTime(requiredRoles) number
	    -generateSafetyRecommendations(exercise, conditions) string[]
	    -filterByFitnessLevel(exercises, fitnessLevel) Exercise[]
	    -filterByPrerequisites(exercises, userPerformance) Exercise[]
	    -rankByReadiness(exercises, userPerformance) Exercise[]
    }

    class ExerciseValidator {
	    -strategies: ValidationStrategy[]
	    +validateForDraft(exercise) ValidationResult
	    +validateForPublication(exercise) ValidationResult
	    +validatePrerequisites(exercise) ValidationResult
	    +getValidationSummary(exercise) ValidationSummary
    }

    class ValidationStrategy {
	    +validate(exercise) ValidationResult
    }

    class BasicInfoValidation {
	    +validate(exercise) ValidationResult
    }

    class InstructionValidation {
	    +validate(exercise) ValidationResult
    }

    class SafetyValidation {
	    +validate(exercise) ValidationResult
    }

    class PrerequisiteValidation {
	    +validate(exercise) ValidationResult
    }

    class ExercisePublisher {
	    -validator: ExerciseValidator
	    +evaluateForPublication(exercise, context) PublishingResult
	    +canPublish(exercise, context) boolean
	    +getApprovalRequirements(exercise) ApprovalRequirements
	    -hasInappropriateContent(exercise) boolean
	    -generateMessage(canPublish, requiresApproval, blockedBy, approvalRequired) string
    }

    class PublishingContext {
	    +publishedBy: ObjectId
	    +targetAudience?: string
	    +reviewerRequired?: boolean
    }

    class ExerciseBuilder {
	    -exercise: Partial~Exercise~
	    -instructions: ExerciseInstruction[]
	    -progressions: ExerciseProgression[]
	    -contraindications: IContraindication[]
	    -prerequisites: IExercisePrerequisite[]
	    +withDescription(description) ExerciseBuilder
	    +withType(type) ExerciseBuilder
	    +withDifficulty(difficulty) ExerciseBuilder
	    +withPrimaryMuscles(...muscles) ExerciseBuilder
	    +withSecondaryMuscles(...muscles) ExerciseBuilder
	    +withEquipment(...equipment) ExerciseBuilder
	    +withDuration(minutes) ExerciseBuilder
	    +withPrerequisites(...prerequisites) ExerciseBuilder
	    +addSimplePrerequisite(exerciseId, category, minRecommended, description) ExerciseBuilder
	    +addInstruction(stepNumber, title, description, options) ExerciseBuilder
	    +addProgression(from, to, title, description, criteria, modifications) ExerciseBuilder
	    +addContraindication(type, severity, conditions, description) ExerciseBuilder
	    +build() Exercise
	    +buildDraft() Exercise
	    +validate() ValidationResult
	    +beginnerStrengthExercise(name, createdBy) ExerciseBuilder$
	    +cardioExercise(name, createdBy) ExerciseBuilder$
	    +rehabExercise(name, createdBy) ExerciseBuilder$
    }

    class ExerciseConfig {
	    +validation: ExerciseValidationRules$
	    +defaults: ExerciseDefaults$
	    +safety: SafetyConfig$
	    +progression: ProgressionConfig$
	    +publishing: PublishingConfig$
	    +prerequisites: PrerequisiteConfig$
    }

    class ExerciseValidationRules {
	    +nameMinLength: number
	    +nameMaxLength: number
	    +descriptionMinLength: number
	    +descriptionMaxLength: number
	    +maxPrimaryMuscles: number
	    +maxSecondaryMuscles: number
	    +maxEquipment: number
	    +maxInstructions: number
	    +maxPrerequisites: number
	    +requireInstructionsForPublish: boolean
    }

    class PrerequisiteConfig {
	    +defaultReadinessThreshold: number
	    +recommendationBoost: number
	    +strictMode: boolean
	    +gracePeriodDays: number
	    +autoProgressSuggestion: boolean
    }

    class SafetyConfig {
	    +highRiskTypes: ExerciseType[]
	    +highRiskDifficulties: Difficulty[]
	    +highRiskMuscles: MuscleZone[]
	    +muscleContraindications: Record~MuscleZone, string[]~
	    +medicalClearanceConditions: string[]
    }

    class Exercise {
	    +id: ObjectId
	    +name: string
	    +description: string
	    +type: ExerciseType
	    +difficulty: Difficulty
	    +primaryMuscles: MuscleZone[]
	    +secondaryMuscles: MuscleZone[]
	    +equipment: EquipmentCategory[]
	    +instructions: ExerciseInstruction[]
	    +progressions: ExerciseProgression[]
	    +contraindications: IContraindication[]
	    +prerequisites: IExercisePrerequisite[]
	    +mediaUrls: string[]
	    +tags: string[]
	    +estimatedDuration: number
	    +caloriesBurnedPerMinute?: number
	    +createdAt: Date
	    +updatedAt: Date
	    +createdBy: ObjectId
	    +isActive: boolean
	    +isDraft: boolean
	    +publishedAt?: Date
	    +reviewedBy?: ObjectId
	    +clone() Exercise
	    +cloneWithModifications(modifications) Exercise
	    +canBeSharedWith(user) boolean
	    +validateForPublication() ValidationResult
	    +canBePublished() boolean
	    +publish() Exercise
	    +saveDraft() Exercise
	    +getDraftPreview() IDraftPreview
	    +targetsMuscle(muscle) boolean
	    +requiresEquipment(equipment) boolean
	    +hasContraindicationsFor(conditions) boolean
	    +hasPrerequisites() boolean
	    +checkPrerequisites(userPerformance) IPrerequisiteStatus[]
	    +isRecommendedFor(userPerformance) boolean
	    +getPrerequisiteReadiness(userPerformance) number
	    +canUserAttempt(userPerformance) boolean
	    +getRecommendationScore(userPerformance) number
	    +getComplexityScore() number
	    +update(updates) Exercise
	    +addInstruction(instruction) Exercise
	    +addProgression(progression) Exercise
	    +addContraindication(contraindication) Exercise
	    +addPrerequisite(prerequisite) Exercise
	    +removePrerequisite(prerequisiteId) Exercise
	    +isPublished() boolean
	    +needsReview() boolean
    }

    class ExerciseInstruction {
	    +id: ObjectId
	    +exerciseId: ObjectId
	    +stepNumber: number
	    +title: string
	    +description: string
	    +duration?: number
	    +mediaUrl?: string
	    +mediaType?: MediaType
	    +tips: string[]
	    +commonMistakes: string[]
	    +isOptional: boolean
	    +createdAt: Date
	    +updatedAt: Date
	    +createdBy: ObjectId
	    +isActive: boolean
	    +isDraft: boolean
	    +getFormattedDuration() string
	    +hasMedia() boolean
	    +update(updates) ExerciseInstruction
	    +addTip(tip) ExerciseInstruction
	    +addCommonMistake(mistake) ExerciseInstruction
	    +removeTip(tip) ExerciseInstruction
	    +removeCommonMistake(mistake) ExerciseInstruction
	    +clone() ExerciseInstruction
	    +isMediaRequired() boolean
	    +getComplexityScore() number
	    +validate() ValidationResult
    }

    class ExerciseVariant {
	    +id: ObjectId
	    +category: string
	    +description: string
	    +primaryMuscles: MuscleZone[]
	    +exerciseType: ExerciseType
	    +exercises: IExerciseOrder[]
	    +verified: boolean
	    +createdAt: Date
	    +updatedAt: Date
	    +createdBy: ObjectId
    }

    class IExerciseRepository {
	    +findById(id, options) Exercise
	    +findByCriteria(criteria, options) Exercise[]
	    +findByType(type, options) Exercise[]
	    +findByDifficulty(difficulty, options) Exercise[]
	    +findByMuscleGroup(muscle, options) Exercise[]
	    +findByEquipment(equipment, options) Exercise[]
	    +findPublished(options) Exercise[]
	    +findDrafts(creatorId, options) Exercise[]
	    +findSimilar(exerciseId, limit) Exercise[]
	    +findPopular(limit, timeframe) Exercise[]
	    +findWithPrerequisites(options) Exercise[]
	    +findAccessibleTo(userPerformance, options) Exercise[]
	    +findRecommendedFor(userPerformance, criteria, options) Exercise[]
	    +create(exercise) Exercise
	    +update(id, updates) Exercise
	    +delete(id) boolean
	    +archive(id) boolean
	    +restore(id) boolean
	    +bulkCreate(exercises) Exercise[]
	    +count(criteria) number
	    +getStatistics() IExerciseStatistics
	    +isNameAvailable(name, excludeId) boolean
    }

    class ExerciseInterfaces {
	    +IExerciseCreationData
	    +IExerciseUpdateData
	    +IExerciseSearchCriteria
	    +IExerciseQueryOptions
	    +IExerciseStatistics
	    +IContraindication
	    +IExercisePrerequisite
	    +IUserPerformance
	    +IPrerequisiteStatus
	    +IRecommendationCriteria
	    +IRecommendationResult
	    +IPrerequisiteReadiness
	    +PrerequisiteAssessment
	    +PrerequisiteCategory
    }

    class IExercisePrerequisite {
	    +id: ObjectId
	    +exerciseId: ObjectId
	    +exerciseName?: string
	    +category: PrerequisiteCategory
	    +minRecommended: number
	    +description?: string
	    +isRequired?: boolean
    }

    class PrerequisiteCategory {
	    <<enumeration>>
	    REPS
	    HOLD_TIME
	    FORM
	    DURATION
	    WEIGHT
	    CONSISTENCY
    }

    class IUserPerformance {
	    +exerciseId: ObjectId
	    +bestReps?: number
	    +bestSets?: number
	    +bestDuration?: number
	    +bestWeight?: number
	    +bestHoldTime?: number
	    +consistentDays?: number
	    +averageRestTime?: number
	    +lastPerformed?: Date
	    +formQuality?: number
	    +averageRating?: number
    }

    class IPrerequisiteStatus {
	    +prerequisite: IExercisePrerequisite
	    +userPerformance?: IUserPerformance
	    +isMet: boolean
	    +progress: number
	    +readinessScore: number
	    +missingRequirements: string[]
	    +estimatedTimeToMeet?: number
    }

    class ValidationError {
	    +field: string
	    +message: string
	    +code: string
	    +severity: ValidationSeverity
    }

    class ExerciseProgression {
	    +id: ObjectId
	    +exerciseId: ObjectId
	    +fromDifficulty: Difficulty
	    +toDifficulty: Difficulty
	    +title: string
	    +description: string
	    +criteria: string[]
	    +modifications: string[]
	    +targetExerciseId?: ObjectId
	    +estimatedTimeToAchieve: number
	    +order: number
	    +createdAt: Date
	    +updatedAt: Date
	    +createdBy: ObjectId
	    +isActive: boolean
	    +isDraft: boolean
	    +getDifficultyIncrease() number
	    +isMajorProgression() boolean
	    +isExerciseTransition() boolean
	    +update(updates) ExerciseProgression
	    +addCriteria(criterion) ExerciseProgression
	    +addModification(modification) ExerciseProgression
	    +removeCriteria(criterion) ExerciseProgression
	    +removeModification(modification) ExerciseProgression
	    +clone() ExerciseProgression
	    +getComplexityScore() number
	    +isReasonableDifficulty() boolean
	    +isReasonableTimeframe() boolean
	    +getSafetyRisk() string
	    +validate() ValidationResult
	    +getProgressionType() string
    }

	<<interface>> ValidationStrategy
	<<interface>> IExerciseRepository
	<<interface>> ExerciseInterfaces
	<<interface>> IExercisePrerequisite
	<<interface>> IUserPerformance
	<<interface>> IPrerequisiteStatus

    ExerciseService *-- ExerciseManagementService : manages
    ExerciseService *-- ExerciseAnalysisService : analyzes
    ExerciseService *-- ExerciseWorkflowService : workflows
    ExerciseManagementService ..> IExerciseRepository : uses
    ExerciseManagementService ..> ExerciseValidator : validates
    ExerciseAnalysisService ..> IExerciseRepository : queries
    ExerciseWorkflowService ..> IExerciseRepository : uses
    ExerciseWorkflowService ..> ExerciseValidator : validates
    ExerciseWorkflowService ..> ExercisePublisher : publishes
    ExerciseValidator *-- ValidationStrategy : strategies
    ValidationStrategy <|.. BasicInfoValidation : implements
    ValidationStrategy <|.. InstructionValidation : implements
    ValidationStrategy <|.. SafetyValidation : implements
    ValidationStrategy <|.. PrerequisiteValidation : implements
    ExercisePublisher ..> ExerciseValidator : uses
    ExercisePublisher ..> PublishingContext : uses
    ExerciseBuilder ..> ExerciseConfig : configures
    ExerciseBuilder ..> Exercise : builds
    ExerciseBuilder ..> ExerciseInstruction : creates
    ExerciseBuilder ..> ExerciseProgression : creates
    ExerciseBuilder ..> IExercisePrerequisite : creates
    ExerciseConfig *-- ExerciseValidationRules : contains
    ExerciseConfig *-- SafetyConfig : contains
    ExerciseConfig *-- PrerequisiteConfig : contains
    Exercise --o ExerciseInstruction : contains
    Exercise --o ExerciseProgression : contains
    Exercise --o IExercisePrerequisite : contains
    Exercise ..> ValidationError : throws
    Exercise ..> IUserPerformance : evaluates
    Exercise ..> IPrerequisiteStatus : returns
    ExerciseManagementService ..> ExerciseInterfaces : uses
    ExerciseAnalysisService ..> ExerciseInterfaces : uses
    ExerciseWorkflowService ..> ExerciseInterfaces : uses
    IExercisePrerequisite ..> PrerequisiteCategory : uses
    IPrerequisiteStatus ..> IExercisePrerequisite : references
    IPrerequisiteStatus ..> IUserPerformance : references