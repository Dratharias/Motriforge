classDiagram
    %% ===== ENTITY LAYER =====
    class Exercise {
        +Types.ObjectId id
        +string name
        +string description
        +ExerciseType type
        +Difficulty difficulty
        +MuscleZone[] primaryMuscles
        +MuscleZone[] secondaryMuscles
        +EquipmentCategory[] equipment
        +ExerciseInstruction[] instructions
        +ExerciseProgression[] progressions
        +IContraindication[] contraindications
        +IExercisePrerequisite[] prerequisites
        +string[] mediaUrls
        +MediaType[] mediaTypes
        +string[] tags
        +number estimatedDuration
        +number caloriesBurnedPerMinute
        +Date createdAt
        +Date updatedAt
        +Types.ObjectId createdBy
        +boolean isActive
        +boolean isDraft
        +Date publishedAt
        +Types.ObjectId reviewedBy
        --
        +clone() Exercise
        +cloneWithModifications(modifications) Exercise
        +canBeSharedWith(user) boolean
        +validateForPublication() ValidationResult
        +validateDraft() ValidationResult
        +publish() Exercise
        +saveDraft() Exercise
        +getDraftPreview() IDraftPreview
        +targetsMuscle(muscle) boolean
        +requiresEquipment(equipment) boolean
        +hasContraindicationsFor(conditions) boolean
        +hasPrerequisites() boolean
        +checkPrerequisites(performances) IPrerequisiteStatus[]
        +isRecommendedFor(performances) boolean
        +getPrerequisiteReadiness(performances) number
        +getRecommendationScore(performances, criteria) number
        +getComplexityScore() number
        +update(updates) Exercise
        +addInstruction(instruction) Exercise
        +addProgression(progression) Exercise
        +addContraindication(contraindication) Exercise
        +addPrerequisite(prerequisite) Exercise
        +removePrerequisite(prerequisiteId) Exercise
        +isPublished() boolean
        +needsReview() boolean
    }

    class ExerciseInstruction {
        +Types.ObjectId id
        +Types.ObjectId exerciseId
        +number stepNumber
        +string title
        +string description
        +number duration
        +string mediaUrl
        +MediaType mediaType
        +string[] tips
        +string[] commonMistakes
        +boolean isOptional
        +Date createdAt
        +Date updatedAt
        +Types.ObjectId createdBy
        +boolean isActive
        +boolean isDraft
        --
        +getFormattedDuration() string
        +hasMedia() boolean
        +update(updates) ExerciseInstruction
        +addTip(tip) ExerciseInstruction
        +addCommonMistake(mistake) ExerciseInstruction
        +removeTip(tip) ExerciseInstruction
        +removeCommonMistake(mistake) ExerciseInstruction
        +clone() ExerciseInstruction
        +isMediaRequired() boolean
        +getComplexityScore() number
        +validate() ValidationResult
    }

    class ExerciseProgression {
        +Types.ObjectId id
        +Types.ObjectId exerciseId
        +Difficulty fromDifficulty
        +Difficulty toDifficulty
        +string title
        +string description
        +string[] criteria
        +string[] modifications
        +IExercisePrerequisite[] prerequisites
        +Types.ObjectId targetExerciseId
        +number estimatedTimeToAchieve
        +number order
        +Date createdAt
        +Date updatedAt
        +Types.ObjectId createdBy
        +boolean isActive
        +boolean isDraft
        --
        +getDifficultyIncrease() number
        +isMajorProgression() boolean
        +isExerciseTransition() boolean
        +update(updates) ExerciseProgression
        +addCriteria(criterion) ExerciseProgression
        +addModification(modification) ExerciseProgression
        +removeCriteria(criterion) ExerciseProgression
        +removeModification(modification) ExerciseProgression
        +clone() ExerciseProgression
        +getComplexityScore() number
        +isReasonableDifficulty() boolean
        +isReasonableTimeframe() boolean
        +getSafetyRisk() string
        +validate() ValidationResult
        +getProgressionType() string
        +checkPrerequisites(performances) IPrerequisiteStatus[]
        +isRecommended(performances) boolean
        +getProgressionRecommendation(performances) object
        +addPrerequisite(prerequisite) ExerciseProgression
        +removePrerequisite(exerciseId) ExerciseProgression
    }

    %% ===== INTERFACE LAYER =====
    class IEntity {
        <<interface>>
        +Types.ObjectId id
        +Date createdAt
        +Date updatedAt
        +Types.ObjectId createdBy
        +boolean isActive
    }

    class ICloneable {
        <<interface>>
        +clone() T
        +cloneWithModifications(modifications) T
    }

    class IShareable {
        <<interface>>
        +canBeSharedWith(user) boolean
    }

    class IDraftable {
        <<interface>>
        +validateForPublication() ValidationResult
        +validateDraft() ValidationResult
        +canBePublished() boolean
        +publish() T
        +saveDraft() T
        +getDraftPreview() IDraftPreview
    }

    %% ===== SERVICE LAYER =====
    class ExerciseService {
        -ExerciseManagementService managementService
        -ExerciseAnalysisService analysisService
        -ExerciseWorkflowService workflowService
        --
        +createExercise(data, createdBy) Exercise
        +updateExercise(id, updates) Exercise
        +cloneExercise(sourceId, createdBy, modifications) Exercise
        +deleteExercise(id) boolean
        +archiveExercise(id) boolean
        +findAlternatives(originalId, options, limit) object
        +assessDifficulty(exercise) DifficultyAssessment
        +calculateProgressionPath(exercise, current, target) ProgressionPath
        +getRecommendedExercises(performances, criteria, options) IRecommendationResult
        +evaluatePrerequisiteReadiness(exerciseId, performances) IPrerequisiteReadiness
        +assessPrerequisiteFulfillment(exerciseId, performances) PrerequisiteAssessment
        +publishExercise(id, context) Exercise
        +getPublicationReadiness(id) object
        +submitForReview(id, submittedBy, notes) object
        +validateExerciseSafety(exerciseId, conditions) object
        +getExercisesForUser(userProfile, options) Exercise[]
        +getExerciseById(id, options) Exercise
        +searchExercises(criteria, options) Exercise[]
        +getPopularExercises(limit, timeframe) Exercise[]
        +getSimilarExercises(exerciseId, limit) Exercise[]
        +getExerciseStatistics() IExerciseStatistics
    }

    class ExerciseManagementService {
        -IExerciseRepository repository
        -ExerciseValidator validator
        --
        +createExercise(data, createdBy) Exercise
        +updateExercise(id, updates) Exercise
        +cloneExercise(sourceId, createdBy, modifications) Exercise
        +deleteExercise(id) boolean
        +archiveExercise(id) boolean
        +restoreExercise(id) boolean
    }

    class ExerciseAnalysisService {
        -IExerciseRepository repository
        --
        +findAlternatives(originalId, options, limit) object
        +assessDifficulty(exercise) DifficultyAssessment
        +calculateProgressionPath(exercise, current, target) ProgressionPath
        +getRecommendedExercises(performances, criteria, options) IRecommendationResult
        +evaluatePrerequisiteReadiness(exercise, performances) IPrerequisiteReadiness
    }

    class ExerciseWorkflowService {
        -IExerciseRepository repository
        -ExerciseValidator validator
        -ExercisePublisher publisher
        --
        +publishExercise(id, context) Exercise
        +getPublicationReadiness(id) object
        +submitForReview(id, submittedBy, notes) object
        +validateExerciseSafety(exerciseId, conditions) object
        +getExercisesForUser(userProfile, options) Exercise[]
    }

    %% ===== UTILITY LAYER =====
    class ExerciseBuilder {
        -Partial~Exercise~ exercise
        -ExerciseInstruction[] instructions
        -ExerciseProgression[] progressions
        -IContraindication[] contraindications
        -IExercisePrerequisite[] prerequisites
        --
        +withDescription(description) ExerciseBuilder
        +withType(type) ExerciseBuilder
        +withDifficulty(difficulty) ExerciseBuilder
        +withPrimaryMuscles(...muscles) ExerciseBuilder
        +withSecondaryMuscles(...muscles) ExerciseBuilder
        +withEquipment(...equipment) ExerciseBuilder
        +withBodyweightOnly() ExerciseBuilder
        +withDuration(minutes) ExerciseBuilder
        +withCaloriesBurn(calories) ExerciseBuilder
        +withTags(...tags) ExerciseBuilder
        +withPrerequisites(...prerequisites) ExerciseBuilder
        +addSimplePrerequisite(exerciseId, category, min, description, required) ExerciseBuilder
        +addRepsPrerequisite(exerciseId, minReps, description) ExerciseBuilder
        +addHoldTimePrerequisite(exerciseId, minSeconds, description) ExerciseBuilder
        +addFormPrerequisite(exerciseId, minQuality, description) ExerciseBuilder
        +addDurationPrerequisite(exerciseId, minSeconds, description) ExerciseBuilder
        +addWeightPrerequisite(exerciseId, minWeight, description) ExerciseBuilder
        +addConsistencyPrerequisite(exerciseId, minDays, description) ExerciseBuilder
        +addPerformancePrerequisite(exerciseId, category, min, description, required) ExerciseBuilder
        +addStabilityPrerequisite(exerciseId, minSeconds, description) ExerciseBuilder
        +withMedia(url, type) ExerciseBuilder
        +withImage(url) ExerciseBuilder
        +withVideo(url) ExerciseBuilder
        +addInstruction(stepNumber, title, description, options) ExerciseBuilder
        +addWarmupInstruction(description, duration) ExerciseBuilder
        +addCooldownInstruction(description, duration) ExerciseBuilder
        +addProgressionWithPrerequisites(options) ExerciseBuilder
        +addProgression(from, to, title, description, criteria, modifications, options) ExerciseBuilder
        +addDifficultyProgression(target, modifications, days) ExerciseBuilder
        +addContraindication(type, severity, conditions, description, alternatives) ExerciseBuilder
        +addMedicalContraindication(conditions, description) ExerciseBuilder
        +addInjuryContraindication(conditions, description) ExerciseBuilder
        +asDraft() ExerciseBuilder
        +asPublished() ExerciseBuilder
        +withReviewer(reviewerId) ExerciseBuilder
        +validate() ValidationResult
        +build() Exercise
        +buildDraft() Exercise
        +beginnerStrengthExercise(name, createdBy)$ ExerciseBuilder
        +cardioExercise(name, createdBy)$ ExerciseBuilder
        +flexibilityExercise(name, createdBy)$ ExerciseBuilder
        +rehabExercise(name, createdBy)$ ExerciseBuilder
    }

    class ExerciseValidator {
        -ValidationStrategy[] strategies
        --
        +validateForDraft(exercise) ValidationResult
        +validateForPublication(exercise) ValidationResult
        +getValidationSummary(exercise) object
    }

    class ExercisePublisher {
        -ExerciseValidator validator
        --
        +evaluateForPublication(exercise, context) PublishingResult
        +canPublish(exercise, context) boolean
        +getApprovalRequirements(exercise) object
    }

    %% ===== REPOSITORY LAYER =====
    class IExerciseRepository {
        <<interface>>
        +findById(id, options) Exercise
        +findByCriteria(criteria, options) Exercise[]
        +findByType(type, options) Exercise[]
        +findByDifficulty(difficulty, options) Exercise[]
        +findByMuscleGroup(muscle, options) Exercise[]
        +findByEquipment(equipment, options) Exercise[]
        +findByCreator(creatorId, options) Exercise[]
        +findPublished(options) Exercise[]
        +findDrafts(creatorId, options) Exercise[]
        +findSafeForConditions(conditions, options) Exercise[]
        +findVariations(exerciseId) Exercise[]
        +findPrerequisites(exerciseId) Exercise[]
        +searchByText(query, options) Exercise[]
        +findByTags(tags, matchAll, options) Exercise[]
        +findByDuration(min, max, options) Exercise[]
        +findBodyweightExercises(options) Exercise[]
        +findWithMedia(options) Exercise[]
        +findWithProgressions(options) Exercise[]
        +create(exercise) Exercise
        +update(id, updates) Exercise
        +archive(id) boolean
        +restore(id) boolean
        +delete(id) boolean
        +count(criteria) number
        +getStatistics() IExerciseStatistics
        +isNameAvailable(name, excludeId) boolean
        +findSimilar(exerciseId, limit) Exercise[]
        +findPopular(limit, timeframe) Exercise[]
        +findRecent(limit, daysBack) Exercise[]
        +findNeedingReview(options) Exercise[]
        +bulkCreate(exercises) Exercise[]
        +bulkUpdate(updates) Exercise[]
        +bulkArchive(ids) boolean
        +findByComplexity(min, max, options) Exercise[]
        +findByMuscleGroups(primary, secondary, options) Exercise[]
        +findByPrimaryMuscles(muscles, options) Exercise[]
        +findBySecondaryMuscles(muscles, options) Exercise[]
        +findByEquipmentList(equipment, requireAll, options) Exercise[]
        +getExercisesByType() Record
        +getExercisesByDifficulty() Record
        +getExercisesByMuscleGroup() Record
        +getAverageDurationByType() Record
        +validateExerciseData(exercise) string[]
        +checkPrerequisiteChain(exerciseId) boolean
        +findCircularPrerequisites(exerciseId) Types.ObjectId[]
    }

    class IExerciseProgressionRepository {
        <<interface>>
        +findById(id) ExerciseProgression
        +findByExerciseId(exerciseId) ExerciseProgression[]
        +findFromDifficulty(exerciseId, difficulty) ExerciseProgression[]
        +findToDifficulty(exerciseId, difficulty) ExerciseProgression[]
        +findBetweenDifficulties(exerciseId, from, to) ExerciseProgression[]
        +findExerciseTransitions(exerciseId) ExerciseProgression[]
        +findByTargetExercise(targetExerciseId) ExerciseProgression[]
        +findByTimeRange(minDays, maxDays) ExerciseProgression[]
        +create(progression) ExerciseProgression
        +update(id, updates) ExerciseProgression
        +delete(id) boolean
        +findProgressionPath(exerciseId, from, to) ExerciseProgression[]
        +findOrderedProgressions(exerciseId) ExerciseProgression[]
        +findByCriteria(criteria) ExerciseProgression[]
        +findByModifications(modification) ExerciseProgression[]
        +bulkCreate(progressions) ExerciseProgression[]
        +bulkUpdate(updates) ExerciseProgression[]
        +bulkDelete(ids) boolean
        +copyProgressions(fromId, toId, createdBy) ExerciseProgression[]
        +validateProgressionPath(exerciseId, from, to) boolean
        +findCircularProgressions(exerciseId) Types.ObjectId[]
        +getProgressionStatistics(exerciseId) object
        +findNextProgression(exerciseId, currentDifficulty) ExerciseProgression
        +findPreviousProgression(exerciseId, currentDifficulty) ExerciseProgression
        +getProgressionLadder(exerciseId) Difficulty[]
        +reorderProgressions(exerciseId, progressionIds) boolean
    }

    class ExerciseQueryOptions {
        +number limit
        +number offset
        +string sortBy
        +string sortOrder
        +boolean includeInactive
        +boolean includeDrafts
        --
        +withAllIncludes(options)$ ExerciseQueryOptions
        +forListing(limit, offset)$ ExerciseQueryOptions
        +forDetailedView()$ ExerciseQueryOptions
        +forSearch(limit, offset)$ ExerciseQueryOptions
        +forDrafts(creatorId, limit)$ ExerciseQueryOptions
        +forPublished(limit)$ ExerciseQueryOptions
        +byDifficulty(sortOrder)$ ExerciseQueryOptions
        +byDuration(sortOrder)$ ExerciseQueryOptions
        +recent(limit)$ ExerciseQueryOptions
        +popular(limit)$ ExerciseQueryOptions
    }

    %% ===== CONFIGURATION LAYER =====
    class ExerciseConfig {
        +ExerciseValidationRules validation$
        +ExerciseDefaults defaults$
        +SafetyConfig safety$
        +ProgressionConfig progression$
        +PublishingConfig publishing$
        +PrerequisiteConfig prerequisites$
        --
        +calculateConfidence(sessions, days, quality)$ number
    }

    %% ===== VARIANT LAYER (FUTURE) =====
    class IExerciseVariant {
        <<interface>>
        +Types.ObjectId id
        +string category
        +string description
        +MuscleZone[] primaryMuscles
        +ExerciseType exerciseType
        +IExerciseOrder[] exercises
        +boolean verified
        +Date createdAt
        +Date updatedAt
        +Types.ObjectId createdBy
    }

    class IExerciseOrder {
        <<interface>>
        +Types.ObjectId exerciseId
        +number difficultyOrder
        +boolean verified
        +Date createdAt
        +Types.ObjectId createdBy
    }

    class IExerciseProgressionVariant {
        <<interface>>
        +Types.ObjectId exerciseId
        +number difficultyOrder
        +IExerciseOrder[] regressions
        +IExerciseOrder[] progressions
        +Types.ObjectId[] alternatives
        +Date lastUpdated
    }

    %% ===== ENUM LAYER =====
    class ExerciseSortField {
        <<enumeration>>
        NAME
        CREATED_AT
        UPDATED_AT
        DIFFICULTY
        DURATION
        POPULARITY
        COMPLEXITY
        TYPE
    }

    %% ===== RELATIONSHIPS =====
    
    %% Entity Implementations
    Exercise --|> IEntity : implements
    Exercise --|> ICloneable : implements
    Exercise --|> IShareable : implements
    Exercise --|> IDraftable : implements
    ExerciseInstruction --|> IEntity : implements
    ExerciseProgression --|> IEntity : implements

    %% Entity Compositions
    Exercise *-- ExerciseInstruction : contains
    Exercise *-- ExerciseProgression : contains

    %% Service Dependencies
    ExerciseService *-- ExerciseManagementService : uses
    ExerciseService *-- ExerciseAnalysisService : uses
    ExerciseService *-- ExerciseWorkflowService : uses

    ExerciseManagementService --> IExerciseRepository : uses
    ExerciseManagementService --> ExerciseValidator : uses
    ExerciseAnalysisService --> IExerciseRepository : uses
    ExerciseWorkflowService --> IExerciseRepository : uses
    ExerciseWorkflowService --> ExerciseValidator : uses
    ExerciseWorkflowService --> ExercisePublisher : uses

    %% Utility Dependencies
    ExerciseBuilder --> Exercise : creates
    ExerciseBuilder --> ExerciseInstruction : creates
    ExerciseBuilder --> ExerciseProgression : creates
    ExerciseBuilder --> ExerciseConfig : uses
    ExerciseValidator --> Exercise : validates
    ExerciseValidator --> ExerciseConfig : uses
    ExercisePublisher --> ExerciseValidator : uses
    ExercisePublisher --> ExerciseConfig : uses

    %% Query Options
    ExerciseQueryOptions --> ExerciseSortField : uses
    ExerciseQueryOptions --|> IExerciseQueryOptions : implements

    %% Repository Dependencies
    IExerciseRepository --> Exercise : manages
    IExerciseProgressionRepository --> ExerciseProgression : manages

    %% Future Variant Relationships
    IExerciseVariant *-- IExerciseOrder : contains
    IExerciseProgressionVariant *-- IExerciseOrder : contains