classDiagram
    %% ===== ENUMS =====
    class Role {
        <<enumeration>>
        ADMIN
        TRAINER
        CLIENT
        MANAGER
        GUEST
    }
    
    class ResourceType {
        <<enumeration>>
        EXERCISE
        WORKOUT
        PROGRAM
        PROFILE
        DASHBOARD
        PROGRESS
        ACTIVITY
        NUTRITION
        SCHEDULE
    }
    
    class Action {
        <<enumeration>>
        CREATE
        READ
        UPDATE
        DELETE
        SHARE
        ACCESS
        EXPORT
        ASSIGN
    }
    
    class ErrorType {
        <<enumeration>>
        MIDDLEWARE
        EVENT
        VALIDATION
        AUTHENTICATION
        AUTHORIZATION
        DATABASE
        NETWORK
        GENERIC
    }
    
    class Severity {
        <<enumeration>>
        DEBUG
        INFO
        WARN
        ERROR
        CRITICAL
    }
    
    class EventType {
        <<enumeration>>
        INFO
        WARNING
        ERROR
        SYSTEM
        ACCESS
        USER_ACTION
        SECURITY
        AUDIT
    }
    
    class Status {
        <<enumeration>>
        ACTIVE
        INACTIVE
        PENDING
        SUSPENDED
        ARCHIVED
    }
    
    %% ===== CORE INTERFACES =====
    class IUser {
        <<interface>>
        +id: string
        +email: string
        +role: Role
        +status: Status
        +organization: Organization
        +createdAt: Date
        +lastActiveAt: Date
    }
    
    class IResourcePermission {
        <<interface>>
        +resource: ResourceType
        +actions: Action[]
        +conditions?: Record~string, any~
    }
    
    class IError {
        <<interface>>
        +code: string
        +message: string
        +severity: Severity
        +timestamp: Date
        +context?: string
        +origin?: string
        +stack?: string
        +traceId?: string
        +userId?: string
    }
    
    class IErrorWrapper {
        <<interface>>
        +type: ErrorType
        +error: IError
        +metadata?: Record~string, any~
    }
    
    class IEvent {
        <<interface>>
        +id: string
        +type: EventType
        +timestamp: Date
        +source: string
        +payload: any
        +originUserId?: string
        +sessionId?: string
        +traceId?: string
        +context?: string
        +handledBy?: string[]
        +metadata?: Record~string, any~
    }
    
    class IEventHandler {
        <<interface>>
        +supports(eventType: EventType): boolean
        +handle(event: IEvent): Promise~void~
        +priority?: number
    }
    
    %% ===== ORGANIZATION & USERS =====
    class Organization {
        +id: string
        +name: string
        +type: string
        +status: Status
        +members: IUser[]
        +settings: Record~string, any~
        +createdAt: Date
        +updatedAt: Date
        +addMember(user: IUser): void
        +removeMember(userId: string): void
        +getMemberCount(): number
        +isActive(): boolean
    }
    
    class User {
        +id: string
        +email: string
        +firstName: string
        +lastName: string
        +role: Role
        +status: Status
        +organization: Organization
        +preferences: Record~string, any~
        +createdAt: Date
        +lastActiveAt: Date
        +getFullName(): string
        +canAccess(resource: ResourceType, action: Action): boolean
        +updateLastActive(): void
        +isActive(): boolean
    }
    
    %% ===== PERMISSIONS & IAM =====
    class PermissionSet {
        +role: Role
        +permissions: IResourcePermission[]
        +description: string
        +isActive: boolean
        +allows(resource: ResourceType, action: Action): boolean
        +addPermission(permission: IResourcePermission): void
        +removePermission(resource: ResourceType): void
        +getPermissions(): IResourcePermission[]
    }
    
    class IAMService {
        -permissionSets: PermissionSet[]
        -auditLogger: IAMLogger
        +canAccess(user: IUser, resource: ResourceType, action: Action): boolean
        +canShare(user: IUser, target: IUser, resource: ResourceType): boolean
        +hasPermission(user: IUser, permission: IResourcePermission): boolean
        +getRolePermissions(role: Role): PermissionSet
        +validateAccess(user: IUser, resource: ResourceType, action: Action): Promise~boolean~
        +auditAccess(user: IUser, resource: ResourceType, action: Action, granted: boolean): void
    }
    
    class SharedResource {
        +id: string
        +resourceId: string
        +resourceType: ResourceType
        +owner: IUser
        +sharedWith: IUser[]
        +allowedActions: Action[]
        +startDate: Date
        +endDate?: Date
        +archived: boolean
        +notes: string
        +createdAt: Date
        +isValid(): boolean
        +hasExpired(): boolean
        +canUserAccess(user: IUser, action: Action): boolean
        +addSharedUser(user: IUser): void
        +removeSharedUser(userId: string): void
        +archive(): void
    }
    
    class IAMLogger {
        -context: string
        +logDecision(userId: string, resource: ResourceType, action: Action, allowed: boolean, reason?: string): void
        +logSharing(ownerId: string, targetUserId: string, resourceType: ResourceType, action: Action): void
        +logSecurityEvent(event: IEvent): void
        +getAccessHistory(userId: string, limit?: number): any[]
    }
    
    %% ===== LOGGER HIERARCHY =====
    class Logger {
        <<abstract>>
        #context: string
        #level: Severity
        +log(message: string, severity?: Severity): void
        +logError(error: IError): void
        +logEvent(event: IEvent): void
        +setContext(context: string): void
        +setLevel(level: Severity): void
        #shouldLog(severity: Severity): boolean
        #formatMessage(message: string, severity: Severity): string
    }
    
    class ConsoleLogger {
        +log(message: string, severity?: Severity): void
        +logError(error: IError): void
        +logEvent(event: IEvent): void
    }
    
    class DatabaseLogger {
        -connectionString: string
        -batchSize: number
        -logQueue: any[]
        +log(message: string, severity?: Severity): void
        +logError(error: IError): void
        +logEvent(event: IEvent): void
        +flush(): Promise~void~
        +setBatchSize(size: number): void
    }
    
    class FileLogger {
        -filePath: string
        -maxFileSize: number
        -rotateCount: number
        +log(message: string, severity?: Severity): void
        +logError(error: IError): void
        +logEvent(event: IEvent): void
        +rotate(): void
        +cleanup(): void
    }
    
    class ContextLogger {
        -loggers: Logger[]
        +addLogger(logger: Logger): void
        +removeLogger(logger: Logger): void
        +log(message: string, severity?: Severity): void
        +logError(error: IError): void
        +logEvent(event: IEvent): void
    }
    
    %% ===== SPECIALIZED LOGGERS =====
    class ValidationLogger {
        +logValidationError(field: string, value: any, rule: string, error: IError): void
        +logValidationSuccess(field: string, value: any): void
    }
    
    class AuthLogger {
        +logAuthAttempt(userId: string, success: boolean, reason?: string): void
        +logLogin(userId: string, sessionId: string): void
        +logLogout(userId: string, sessionId: string): void
        +logPasswordChange(userId: string): void
        +logSecurityBreach(userId: string, details: any): void
    }
    
    class AuditLogger {
        +logUserAction(userId: string, action: string, resource: ResourceType, details?: any): void
        +logSystemEvent(event: string, severity: Severity, details?: any): void
        +logDataChange(userId: string, table: string, recordId: string, changes: any): void
        +getAuditTrail(filters: any): Promise~any[]~
    }
    
    %% ===== ERROR TYPES =====
    class ValidationError {
        +field: string
        +value: any
        +rule: string
        +error: IError
        +getDetails(): any
    }
    
    class AuthenticationError {
        +userId: string
        +attemptedAction: string
        +error: IError
        +getSecurityLevel(): Severity
    }
    
    class AuthorizationError {
        +userId: string
        +resource: ResourceType
        +action: Action
        +error: IError
        +getReason(): string
    }
    
    class DatabaseError {
        +query: string
        +operation: string
        +table?: string
        +error: IError
        +isRetryable(): boolean
    }
    
    class NetworkError {
        +url: string
        +method: string
        +statusCode?: number
        +error: IError
        +isTimeout(): boolean
    }
    
    %% ===== EVENT BUS & EVENTS =====
    class EventBus {
        -handlers: IEventHandler[]
        -eventHistory: IEvent[]
        -maxHistorySize: number
        +register(handler: IEventHandler): void
        +unregister(handler: IEventHandler): void
        +emit(event: IEvent): Promise~void~
        +getHandlers(eventType: EventType): IEventHandler[]
        +getEventHistory(limit?: number): IEvent[]
        +clearHistory(): void
    }
    
    class BaseEvent {
        +id: string
        +type: EventType
        +timestamp: Date
        +source: string
        +payload: any
        +originUserId?: string
        +sessionId?: string
        +traceId?: string
        +context?: string
        +handledBy: string[]
        +metadata: Record~string, any~
        +addHandler(handlerName: string): void
        +isHandledBy(handlerName: string): boolean
    }
    
    class UserEvent {
        +userId: string
        +action: string
        +previousState?: any
        +newState?: any
        +getUserDetails(): any
    }
    
    class SecurityEvent {
        +userId: string
        +resource: ResourceType
        +action: Action
        +success: boolean
        +reason?: string
        +ipAddress?: string
        +userAgent?: string
        +getThreatLevel(): Severity
    }
    
    class SystemEvent {
        +component: string
        +operation: string
        +success: boolean
        +duration?: number
        +error?: IError
        +isHealthCheck(): boolean
    }
    
    class SharingEvent {
        +resourceId: string
        +resourceType: ResourceType
        +sharedBy: string
        +sharedWith: string[]
        +permissions: Action[]
        +expiresAt?: Date
        +getResourceDetails(): any
    }
    
    %% ===== EVENT HANDLERS =====
    class AuditEventHandler {
        -auditLogger: AuditLogger
        +supports(eventType: EventType): boolean
        +handle(event: IEvent): Promise~void~
        +priority: number
    }
    
    class SecurityEventHandler {
        -securityService: any
        +supports(eventType: EventType): boolean
        +handle(event: IEvent): Promise~void~
        +priority: number
        +checkThreatLevel(event: SecurityEvent): Severity
    }
    
    class NotificationEventHandler {
        -notificationService: any
        +supports(eventType: EventType): boolean
        +handle(event: IEvent): Promise~void~
        +priority: number
        +shouldNotify(event: IEvent): boolean
    }
    
    class MetricsEventHandler {
        -metricsService: any
        +supports(eventType: EventType): boolean
        +handle(event: IEvent): Promise~void~
        +priority: number
        +recordMetric(event: IEvent): void
    }
    
    %% ===== RELATIONSHIPS =====
    
    %% Core relationships
    User ..|> IUser
    Organization --> IUser : contains
    User --> Organization : belongs to
    
    %% Permission relationships
    PermissionSet --> Role : for
    PermissionSet --> IResourcePermission : contains
    IAMService --> PermissionSet : manages
    IAMService --> IAMLogger : uses
    
    %% Sharing relationships
    SharedResource --> IUser : owner
    SharedResource --> IUser : sharedWith
    SharedResource --> ResourceType : type
    SharedResource --> Action : allowedActions
    
    %% Logger hierarchy
    Logger <|-- ConsoleLogger
    Logger <|-- DatabaseLogger
    Logger <|-- FileLogger
    Logger <|-- ContextLogger
    Logger <|-- ValidationLogger
    Logger <|-- AuthLogger
    Logger <|-- AuditLogger
    
    %% Error relationships
    ValidationError --> IError
    AuthenticationError --> IError
    AuthorizationError --> IError
    DatabaseError --> IError
    NetworkError --> IError
    
    %% Event relationships
    BaseEvent ..|> IEvent
    BaseEvent <|-- UserEvent
    BaseEvent <|-- SecurityEvent
    BaseEvent <|-- SystemEvent
    BaseEvent <|-- SharingEvent
    
    %% Event handling
    EventBus --> IEventHandler : manages
    EventBus --> IEvent : processes
    
    IEventHandler <|.. AuditEventHandler
    IEventHandler <|.. SecurityEventHandler
    IEventHandler <|.. NotificationEventHandler
    IEventHandler <|.. MetricsEventHandler
    
    %% Event handler dependencies
    AuditEventHandler --> AuditLogger
    SecurityEventHandler --> SecurityEvent
    
    %% Cross-cutting relationships
    IAMService --> SecurityEvent : generates
    SharedResource --> SharingEvent : generates
    User --> UserEvent : generates