# Multi-stage Dockerfile for development and production

# Base stage with Node.js
FROM node:20-alpine AS base
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
  git \
  python3 \
  make \
  g++ \
  && rm -rf /var/cache/apk/*

# Copy package files
COPY package.json package-lock.json ./

# Development stage
FROM base AS development
ENV NODE_ENV=development

# Install all dependencies (including dev dependencies)
RUN npm ci --include=dev

# Copy source code
COPY . .

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
  adduser -S solidjs -u 1001

# Change ownership of the app directory
RUN chown -R solidjs:nodejs /app
USER solidjs

# Expose ports
EXPOSE 3000 24678

# Start development server
CMD ["npm", "run", "dev"]

# Production dependencies stage
FROM base AS prod-deps
ENV NODE_ENV=production

# Install only production dependencies
RUN npm ci --only=production && npm cache clean --force

# Production build stage
FROM base AS build
ENV NODE_ENV=production

# Install all dependencies for building
RUN npm ci --include=dev

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine AS production
WORKDIR /app

ENV NODE_ENV=production

# Install runtime dependencies
RUN apk add --no-cache \
  dumb-init \
  && rm -rf /var/cache/apk/*

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
  adduser -S solidjs -u 1001

# Copy production dependencies
COPY --from=prod-deps --chown=solidjs:nodejs /app/node_modules ./node_modules

# Copy built application
COPY --from=build --chown=solidjs:nodejs /app/dist ./dist
COPY --from=build --chown=solidjs:nodejs /app/package.json ./

# Switch to non-root user
USER solidjs

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node --check /app/dist/server.js || exit 1

# Start application with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/server.js"]