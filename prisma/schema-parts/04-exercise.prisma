// =====================================
// EXERCISE MANAGEMENT
// =====================================

model Exercise {
  id                String   @id @default(cuid())
  name              String   @unique @db.VarChar(100)
  description       String   @db.VarChar(500)
  instructions      String   @db.Text
  notes             String?  @db.Text
  difficultyLevelId String   @map("difficulty_level_id")
  visibilityId      String   @map("visibility_id")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  createdBy         String   @map("created_by")

  // Relations
  difficultyLevel      DifficultyLevel        @relation(fields: [difficultyLevelId], references: [id])
  visibility           Visibility             @relation(fields: [visibilityId], references: [id])
  createdByUser        User                   @relation("ExerciseCreatedBy", fields: [createdBy], references: [id])
  categories           ExerciseCategory[]
  tags                 ExerciseTag[]
  muscleTargets        ExerciseMuscleTarget[]
  equipment            ExerciseEquipment[]
  media                ExerciseMedia[]
  exerciseInstructions ExerciseInstruction[]

  @@map("exercise")
}

model ExerciseCategory {
  exerciseId String   @map("exercise_id")
  categoryId String   @map("category_id")
  isPrimary  Boolean  @default(false) @map("is_primary")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @map("created_by")

  // Relations
  exercise      Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  category      Category @relation(fields: [categoryId], references: [id])
  createdByUser User     @relation("ExerciseCategoryCreatedBy", fields: [createdBy], references: [id])

  @@id([exerciseId, categoryId])
  @@map("exercise_category")
}

model ExerciseTag {
  exerciseId String   @map("exercise_id")
  tagId      String   @map("tag_id")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @map("created_by")

  // Relations
  exercise      Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  tag           Tag      @relation(fields: [tagId], references: [id])
  createdByUser User     @relation("ExerciseTagCreatedBy", fields: [createdBy], references: [id])

  @@id([exerciseId, tagId])
  @@map("exercise_tag")
}

model ExerciseMuscleTarget {
  id         String   @id @default(cuid())
  exerciseId String   @map("exercise_id")
  muscleId   String   @map("muscle_id")
  targetType String   @map("target_type") @db.VarChar(20) // TODO: Convert to enum (PRIMARY, SECONDARY, STABILIZER)
  intensity  Int      @db.SmallInt
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @map("created_by")

  // Relations
  exercise      Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  muscle        Muscle   @relation(fields: [muscleId], references: [id])
  createdByUser User     @relation("ExerciseMuscleTargetCreatedBy", fields: [createdBy], references: [id])

  @@map("exercise_muscle_target")
}

model ExerciseEquipment {
  exerciseId  String   @map("exercise_id")
  equipmentId String   @map("equipment_id")
  isRequired  Boolean  @default(true) @map("is_required")
  usageNotes  String?  @map("usage_notes") @db.Text
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   String   @map("created_by")

  // Relations
  exercise      Exercise  @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  equipment     Equipment @relation(fields: [equipmentId], references: [id])
  createdByUser User      @relation("ExerciseEquipmentCreatedBy", fields: [createdBy], references: [id])

  @@id([exerciseId, equipmentId])
  @@map("exercise_equipment")
}
