// =====================================
// WORKOUT MANAGEMENT
// =====================================

model Workout {
  id                String   @id @default(cuid())
  name              String   @unique @db.VarChar(100)
  durationSeconds   Int      @map("duration_seconds") @db.SmallInt
  difficultyLevelId String   @map("difficulty_level_id")
  notes             String?  @db.Text
  visibilityId      String   @map("visibility_id")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  createdBy         String   @map("created_by")

  // Relations
  difficultyLevel  DifficultyLevel       @relation(fields: [difficultyLevelId], references: [id])
  visibility       Visibility            @relation(fields: [visibilityId], references: [id])
  createdByUser    User                  @relation("WorkoutCreatedBy", fields: [createdBy], references: [id])
  categories       WorkoutCategory[]
  tags             WorkoutTag[]
  muscleTargets    WorkoutMuscleTarget[]
  sets             WorkoutSet[]
  media            WorkoutMedia[]
  scheduleWorkouts ScheduleWorkout[]
  userSessions     UserWorkoutSession[]

  @@map("workout")
}

model WorkoutCategory {
  workoutId  String   @map("workout_id")
  categoryId String   @map("category_id")
  isPrimary  Boolean  @default(false) @map("is_primary")
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @map("created_by")

  // Relations
  workout       Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  category      Category @relation(fields: [categoryId], references: [id])
  createdByUser User     @relation("WorkoutCategoryCreatedBy", fields: [createdBy], references: [id])

  @@id([workoutId, categoryId])
  @@map("workout_category")
}

model WorkoutTag {
  workoutId String   @map("workout_id")
  tagId     String   @map("tag_id")
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  createdBy String   @map("created_by")

  // Relations
  workout       Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  tag           Tag     @relation(fields: [tagId], references: [id])
  createdByUser User    @relation("WorkoutTagCreatedBy", fields: [createdBy], references: [id])

  @@id([workoutId, tagId])
  @@map("workout_tag")
}

model WorkoutMuscleTarget {
  id         String   @id @default(cuid())
  workoutId  String   @map("workout_id")
  muscleId   String   @map("muscle_id")
  targetType String   @map("target_type") @db.VarChar(20) // TODO: Convert to enum
  intensity  Int      @db.SmallInt
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @map("created_by")

  // Relations
  workout       Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  muscle        Muscle  @relation(fields: [muscleId], references: [id])
  createdByUser User    @relation("WorkoutMuscleTargetCreatedBy", fields: [createdBy], references: [id])

  @@map("workout_muscle_target")
}

model WorkoutSet {
  id             String   @id @default(cuid())
  workoutId      String   @map("workout_id")
  name           String   @db.VarChar(100)
  restSeconds    Int      @default(0) @map("rest_seconds") @db.SmallInt
  targetMuscleId String   @map("target_muscle_id")
  orderIndex     Int      @map("order_index") @db.SmallInt
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  createdBy      String   @map("created_by")

  // Relations
  workout       Workout               @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  targetMuscle  Muscle                @relation("WorkoutSetTargetMuscle", fields: [targetMuscleId], references: [id])
  createdByUser User                  @relation("WorkoutSetCreatedBy", fields: [createdBy], references: [id])
  instructions  ExerciseInstruction[]

  @@map("workout_set")
}

model ExerciseInstruction {
  id                 String   @id @default(cuid())
  workoutSetId       String   @map("workout_set_id")
  exerciseId         String   @map("exercise_id")
  setsCount          Int      @default(1) @map("sets_count") @db.SmallInt
  repsCount          Int?     @map("reps_count") @db.SmallInt
  weightKg           Decimal? @map("weight_kg") @db.Decimal(5, 2)
  durationSeconds    Int?     @map("duration_seconds") @db.SmallInt
  restSeconds        Int      @default(0) @map("rest_seconds") @db.SmallInt
  orderIndex         Int      @map("order_index") @db.SmallInt
  customInstructions String?  @map("custom_instructions") @db.Text
  isActive           Boolean  @default(true) @map("is_active")
  createdAt          DateTime @default(now()) @map("created_at")
  createdBy          String   @map("created_by")

  // Relations
  workoutSet       WorkoutSet                @relation(fields: [workoutSetId], references: [id], onDelete: Cascade)
  exercise         Exercise                  @relation(fields: [exerciseId], references: [id])
  createdByUser    User                      @relation("ExerciseInstructionCreatedBy", fields: [createdBy], references: [id])
  userPerformances UserExercisePerformance[]

  @@map("exercise_instruction")
}

model WorkoutMedia {
  workoutId  String   @map("workout_id")
  mediaId    String   @map("media_id")
  purpose    String   @db.VarChar(50) // TODO: Convert to enum
  orderIndex Int      @default(0) @map("order_index") @db.SmallInt
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  createdBy  String   @map("created_by")

  // Relations
  workout       Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  media         Media   @relation(fields: [mediaId], references: [id])
  createdByUser User    @relation("WorkoutMediaCreatedBy", fields: [createdBy], references: [id])

  @@id([workoutId, mediaId])
  @@map("workout_media")
}
