generator client {
  provider = "prisma-client-js"
  output   = "../generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =====================================
// ENUMS
// =====================================

enum VisibilityLevel {
  PUBLIC
  MEMBERS
  PREMIUM
  PRIVATE
  ADMIN
}

enum CategoryType {
  EXERCISE
  WORKOUT
  PROGRAM
  EQUIPMENT
  GENERAL
}

enum TagType {
  EXERCISE
  WORKOUT
  PROGRAM
  EQUIPMENT
  GENERAL
}

enum MetricDataType {
  NUMBER
  DECIMAL
  BOOLEAN
  TEXT
}

enum TargetType {
  PRIMARY
  SECONDARY
  STABILIZER
}

enum MediaPurpose {
  THUMBNAIL
  INSTRUCTION
  DEMO
  COVER
  GALLERY
}

enum ProgramStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum WorkoutSessionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  SKIPPED
  CANCELLED
}

enum MeasurementSource {
  MANUAL
  DEVICE
  CALCULATED
  IMPORTED
}

// =====================================
// CORE FOUNDATION MODELS
// =====================================

model Visibility {
  id          String          @id @default(cuid())
  name        VisibilityLevel @unique
  description String?
  level       Int             @default(0)
  isActive    Boolean         @default(true) @map("is_active")
  createdAt   DateTime        @default(now()) @map("created_at")
  createdBy   String?         @map("created_by") // Allow null for system data

  // Relations
  createdByUser User?       @relation("VisibilityCreatedBy", fields: [createdBy], references: [id], map: "visibility_created_by_fkey")
  exercises     Exercise[]
  workouts      Workout[]
  programs      Program[]
  equipment     Equipment[]
  media         Media[]
  users         User[]      @relation("UserVisibility")

  @@map("visibility")
}

model Category {
  id          String       @id @default(cuid())
  name        String       @unique
  type        CategoryType
  description String?
  parentId    String?      @map("parent_id")
  level       Int          @default(0)
  path        String
  isActive    Boolean      @default(true) @map("is_active")
  createdAt   DateTime     @default(now()) @map("created_at")
  createdBy   String?      @map("created_by") // Allow null for system data

  // Relations
  parent              Category?           @relation("CategoryParent", fields: [parentId], references: [id], map: "category_parent_fkey")
  children            Category[]          @relation("CategoryParent")
  createdByUser       User?               @relation("CategoryCreatedBy", fields: [createdBy], references: [id], map: "category_created_by_fkey")
  exerciseCategories  ExerciseCategory[]
  workoutCategories   WorkoutCategory[]
  programCategories   ProgramCategory[]
  equipmentCategories EquipmentCategory[]

  @@map("category")
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  type        TagType
  description String?
  isSystem    Boolean  @default(false) @map("is_system")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   String?  @map("created_by") // Allow null for system data

  // Relations
  createdByUser User?          @relation("TagCreatedBy", fields: [createdBy], references: [id], map: "tag_created_by_fkey")
  exerciseTags  ExerciseTag[]
  workoutTags   WorkoutTag[]
  programTags   ProgramTag[]
  equipmentTags EquipmentTag[]
  mediaTags     MediaTag[]

  @@map("tag")
}

model DifficultyLevel {
  id          String   @id @default(cuid())
  name        String   @unique
  value       Int      @unique
  description String?
  colorCode   String?  @map("color_code")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  createdBy   String?  @map("created_by") // Allow null for system data

  // Relations
  createdByUser User?      @relation("DifficultyLevelCreatedBy", fields: [createdBy], references: [id], map: "difficulty_level_created_by_fkey")
  exercises     Exercise[]
  workouts      Workout[]
  programs      Program[]

  @@map("difficulty_level")
}

model Metric {
  id          String         @id @default(cuid())
  name        String         @unique
  unit        String
  dataType    MetricDataType @map("data_type")
  description String?
  isActive    Boolean        @default(true) @map("is_active")
  createdAt   DateTime       @default(now()) @map("created_at")
  createdBy   String?        @map("created_by") // Allow null for system data

  // Relations
  createdByUser User?             @relation("MetricCreatedBy", fields: [createdBy], references: [id], map: "metric_created_by_fkey")
  measurements  UserMeasurement[]

  @@map("metric")
}
