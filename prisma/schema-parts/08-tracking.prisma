// =====================================
// USER PROGRESS TRACKING
// =====================================

model UserProgramEnrollment {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  programId      String    @map("program_id")
  status         String    @default("ACTIVE") @db.VarChar(20) // TODO: Convert to enum
  startDate      DateTime  @default(now()) @map("start_date") @db.Date
  completionDate DateTime? @map("completion_date") @db.Date
  currentDay     Int       @default(1) @map("current_day") @db.SmallInt
  notes          String?   @db.Text
  isActive       Boolean   @default(true) @map("is_active")
  createdAt      DateTime  @default(now()) @map("created_at")
  createdBy      String    @map("created_by")

  // Relations
  user            User                 @relation("UserProgramEnrollments", fields: [userId], references: [id])
  program         Program              @relation(fields: [programId], references: [id])
  createdByUser   User                 @relation("UserProgramEnrollmentCreatedBy", fields: [createdBy], references: [id])
  workoutSessions UserWorkoutSession[]

  @@map("user_program_enrollment")
}

model UserWorkoutSession {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  workoutId       String    @map("workout_id")
  enrollmentId    String?   @map("enrollment_id")
  status          String    @default("PLANNED") @db.VarChar(20) // TODO: Convert to enum
  scheduledAt     DateTime? @map("scheduled_at")
  startedAt       DateTime? @map("started_at")
  completedAt     DateTime? @map("completed_at")
  durationSeconds Int?      @map("duration_seconds") @db.SmallInt
  effortRating    Int?      @map("effort_rating") @db.SmallInt
  sorenessRating  Int?      @map("soreness_rating") @db.SmallInt
  notes           String?   @db.Text
  isActive        Boolean   @default(true) @map("is_active")
  createdAt       DateTime  @default(now()) @map("created_at")
  createdBy       String    @map("created_by")

  // Relations
  user          User                      @relation("UserWorkoutSessions", fields: [userId], references: [id])
  workout       Workout                   @relation(fields: [workoutId], references: [id])
  enrollment    UserProgramEnrollment?    @relation(fields: [enrollmentId], references: [id])
  createdByUser User                      @relation("UserWorkoutSessionCreatedBy", fields: [createdBy], references: [id])
  performances  UserExercisePerformance[]

  @@map("user_workout_session")
}

model UserExercisePerformance {
  id               String   @id @default(cuid())
  userId           String   @map("user_id")
  sessionId        String   @map("session_id")
  instructionId    String   @map("instruction_id")
  setsCompleted    Int      @default(0) @map("sets_completed") @db.SmallInt
  repsCompleted    Int?     @map("reps_completed") @db.SmallInt
  weightKg         Decimal? @map("weight_kg") @db.Decimal(5, 2)
  durationSeconds  Int?     @map("duration_seconds") @db.SmallInt
  difficultyRating Int?     @map("difficulty_rating") @db.SmallInt
  notes            String?  @db.Text
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  createdBy        String   @map("created_by")

  // Relations
  user          User                @relation("UserExercisePerformances", fields: [userId], references: [id], map: "user_exercise_performance_user_fkey")
  session       UserWorkoutSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade, map: "user_exercise_performance_session_fkey")
  instruction   ExerciseInstruction @relation(fields: [instructionId], references: [id], map: "user_exercise_performance_instruction_fkey")
  createdByUser User                @relation("UserExercisePerformanceCreatedBy", fields: [createdBy], references: [id], map: "user_exercise_performance_created_by_fkey")
  User          User                @relation(fields: [userId], references: [id])

  @@map("user_exercise_performance")
}

model UserMeasurement {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  metricId        String   @map("metric_id")
  value           Decimal  @db.Decimal(10, 3)
  measurementDate DateTime @map("measurement_date") @db.Date
  notes           String?  @db.Text
  source          String   @default("MANUAL") @db.VarChar(20) // TODO: Convert to enum
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  createdBy       String   @map("created_by")

  // Relations
  user          User   @relation("UserMeasurements", fields: [userId], references: [id])
  metric        Metric @relation(fields: [metricId], references: [id])
  createdByUser User   @relation("UserMeasurementCreatedBy", fields: [createdBy], references: [id])

  @@map("user_measurement")
}
